
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000182e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000182e  000018c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800168  00800168  000019ca  2**0
                  ALLOC
  3 .stab         000016a4  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001221  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00004291  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000012f  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000171d  00000000  00000000  000044a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c61  00000000  00000000  00005bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c76  00000000  00000000  0000681e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00007494  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b7  00000000  00000000  00007594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007b8  00000000  00000000  0000784b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 39       	cpi	r26, 0x9A	; 154
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e2       	ldi	r30, 0x2E	; 46
      78:	f8 e1       	ldi	r31, 0x18	; 24
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 32 0b 	call	0x1664	; 0x1664 <main>
      8a:	0c 94 15 0c 	jmp	0x182a	; 0x182a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_fpadd_parts>:
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__prologue_saves__>
      9e:	dc 01       	movw	r26, r24
      a0:	2b 01       	movw	r4, r22
      a2:	fa 01       	movw	r30, r20
      a4:	9c 91       	ld	r25, X
      a6:	92 30       	cpi	r25, 0x02	; 2
      a8:	08 f4       	brcc	.+2      	; 0xac <_fpadd_parts+0x1a>
      aa:	39 c1       	rjmp	.+626    	; 0x31e <_fpadd_parts+0x28c>
      ac:	eb 01       	movw	r28, r22
      ae:	88 81       	ld	r24, Y
      b0:	82 30       	cpi	r24, 0x02	; 2
      b2:	08 f4       	brcc	.+2      	; 0xb6 <_fpadd_parts+0x24>
      b4:	33 c1       	rjmp	.+614    	; 0x31c <_fpadd_parts+0x28a>
      b6:	94 30       	cpi	r25, 0x04	; 4
      b8:	69 f4       	brne	.+26     	; 0xd4 <_fpadd_parts+0x42>
      ba:	84 30       	cpi	r24, 0x04	; 4
      bc:	09 f0       	breq	.+2      	; 0xc0 <_fpadd_parts+0x2e>
      be:	2f c1       	rjmp	.+606    	; 0x31e <_fpadd_parts+0x28c>
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	9c 91       	ld	r25, X
      c4:	11 97       	sbiw	r26, 0x01	; 1
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	98 17       	cp	r25, r24
      ca:	09 f4       	brne	.+2      	; 0xce <_fpadd_parts+0x3c>
      cc:	28 c1       	rjmp	.+592    	; 0x31e <_fpadd_parts+0x28c>
      ce:	a0 e6       	ldi	r26, 0x60	; 96
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	25 c1       	rjmp	.+586    	; 0x31e <_fpadd_parts+0x28c>
      d4:	84 30       	cpi	r24, 0x04	; 4
      d6:	09 f4       	brne	.+2      	; 0xda <_fpadd_parts+0x48>
      d8:	21 c1       	rjmp	.+578    	; 0x31c <_fpadd_parts+0x28a>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a9 f4       	brne	.+42     	; 0x108 <_fpadd_parts+0x76>
      de:	92 30       	cpi	r25, 0x02	; 2
      e0:	09 f0       	breq	.+2      	; 0xe4 <_fpadd_parts+0x52>
      e2:	1d c1       	rjmp	.+570    	; 0x31e <_fpadd_parts+0x28c>
      e4:	9a 01       	movw	r18, r20
      e6:	ad 01       	movw	r20, r26
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	ea 01       	movw	r28, r20
      ec:	09 90       	ld	r0, Y+
      ee:	ae 01       	movw	r20, r28
      f0:	e9 01       	movw	r28, r18
      f2:	09 92       	st	Y+, r0
      f4:	9e 01       	movw	r18, r28
      f6:	81 50       	subi	r24, 0x01	; 1
      f8:	c1 f7       	brne	.-16     	; 0xea <_fpadd_parts+0x58>
      fa:	e2 01       	movw	r28, r4
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	9c 91       	ld	r25, X
     102:	89 23       	and	r24, r25
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	08 c1       	rjmp	.+528    	; 0x318 <_fpadd_parts+0x286>
     108:	92 30       	cpi	r25, 0x02	; 2
     10a:	09 f4       	brne	.+2      	; 0x10e <_fpadd_parts+0x7c>
     10c:	07 c1       	rjmp	.+526    	; 0x31c <_fpadd_parts+0x28a>
     10e:	12 96       	adiw	r26, 0x02	; 2
     110:	2d 90       	ld	r2, X+
     112:	3c 90       	ld	r3, X
     114:	13 97       	sbiw	r26, 0x03	; 3
     116:	eb 01       	movw	r28, r22
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	14 96       	adiw	r26, 0x04	; 4
     11e:	ad 90       	ld	r10, X+
     120:	bd 90       	ld	r11, X+
     122:	cd 90       	ld	r12, X+
     124:	dc 90       	ld	r13, X
     126:	17 97       	sbiw	r26, 0x07	; 7
     128:	ec 80       	ldd	r14, Y+4	; 0x04
     12a:	fd 80       	ldd	r15, Y+5	; 0x05
     12c:	0e 81       	ldd	r16, Y+6	; 0x06
     12e:	1f 81       	ldd	r17, Y+7	; 0x07
     130:	91 01       	movw	r18, r2
     132:	28 1b       	sub	r18, r24
     134:	39 0b       	sbc	r19, r25
     136:	b9 01       	movw	r22, r18
     138:	37 ff       	sbrs	r19, 7
     13a:	04 c0       	rjmp	.+8      	; 0x144 <_fpadd_parts+0xb2>
     13c:	66 27       	eor	r22, r22
     13e:	77 27       	eor	r23, r23
     140:	62 1b       	sub	r22, r18
     142:	73 0b       	sbc	r23, r19
     144:	60 32       	cpi	r22, 0x20	; 32
     146:	71 05       	cpc	r23, r1
     148:	0c f0       	brlt	.+2      	; 0x14c <_fpadd_parts+0xba>
     14a:	61 c0       	rjmp	.+194    	; 0x20e <_fpadd_parts+0x17c>
     14c:	12 16       	cp	r1, r18
     14e:	13 06       	cpc	r1, r19
     150:	6c f5       	brge	.+90     	; 0x1ac <_fpadd_parts+0x11a>
     152:	37 01       	movw	r6, r14
     154:	48 01       	movw	r8, r16
     156:	06 2e       	mov	r0, r22
     158:	04 c0       	rjmp	.+8      	; 0x162 <_fpadd_parts+0xd0>
     15a:	96 94       	lsr	r9
     15c:	87 94       	ror	r8
     15e:	77 94       	ror	r7
     160:	67 94       	ror	r6
     162:	0a 94       	dec	r0
     164:	d2 f7       	brpl	.-12     	; 0x15a <_fpadd_parts+0xc8>
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	04 c0       	rjmp	.+8      	; 0x178 <_fpadd_parts+0xe6>
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	44 1f       	adc	r20, r20
     176:	55 1f       	adc	r21, r21
     178:	6a 95       	dec	r22
     17a:	d2 f7       	brpl	.-12     	; 0x170 <_fpadd_parts+0xde>
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	30 40       	sbci	r19, 0x00	; 0
     180:	40 40       	sbci	r20, 0x00	; 0
     182:	50 40       	sbci	r21, 0x00	; 0
     184:	2e 21       	and	r18, r14
     186:	3f 21       	and	r19, r15
     188:	40 23       	and	r20, r16
     18a:	51 23       	and	r21, r17
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	41 05       	cpc	r20, r1
     192:	51 05       	cpc	r21, r1
     194:	21 f0       	breq	.+8      	; 0x19e <_fpadd_parts+0x10c>
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	79 01       	movw	r14, r18
     1a0:	8a 01       	movw	r16, r20
     1a2:	e6 28       	or	r14, r6
     1a4:	f7 28       	or	r15, r7
     1a6:	08 29       	or	r16, r8
     1a8:	19 29       	or	r17, r9
     1aa:	3c c0       	rjmp	.+120    	; 0x224 <_fpadd_parts+0x192>
     1ac:	23 2b       	or	r18, r19
     1ae:	d1 f1       	breq	.+116    	; 0x224 <_fpadd_parts+0x192>
     1b0:	26 0e       	add	r2, r22
     1b2:	37 1e       	adc	r3, r23
     1b4:	35 01       	movw	r6, r10
     1b6:	46 01       	movw	r8, r12
     1b8:	06 2e       	mov	r0, r22
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0x132>
     1bc:	96 94       	lsr	r9
     1be:	87 94       	ror	r8
     1c0:	77 94       	ror	r7
     1c2:	67 94       	ror	r6
     1c4:	0a 94       	dec	r0
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0x12a>
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <_fpadd_parts+0x148>
     1d2:	22 0f       	add	r18, r18
     1d4:	33 1f       	adc	r19, r19
     1d6:	44 1f       	adc	r20, r20
     1d8:	55 1f       	adc	r21, r21
     1da:	6a 95       	dec	r22
     1dc:	d2 f7       	brpl	.-12     	; 0x1d2 <_fpadd_parts+0x140>
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	30 40       	sbci	r19, 0x00	; 0
     1e2:	40 40       	sbci	r20, 0x00	; 0
     1e4:	50 40       	sbci	r21, 0x00	; 0
     1e6:	2a 21       	and	r18, r10
     1e8:	3b 21       	and	r19, r11
     1ea:	4c 21       	and	r20, r12
     1ec:	5d 21       	and	r21, r13
     1ee:	21 15       	cp	r18, r1
     1f0:	31 05       	cpc	r19, r1
     1f2:	41 05       	cpc	r20, r1
     1f4:	51 05       	cpc	r21, r1
     1f6:	21 f0       	breq	.+8      	; 0x200 <_fpadd_parts+0x16e>
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	59 01       	movw	r10, r18
     202:	6a 01       	movw	r12, r20
     204:	a6 28       	or	r10, r6
     206:	b7 28       	or	r11, r7
     208:	c8 28       	or	r12, r8
     20a:	d9 28       	or	r13, r9
     20c:	0b c0       	rjmp	.+22     	; 0x224 <_fpadd_parts+0x192>
     20e:	82 15       	cp	r24, r2
     210:	93 05       	cpc	r25, r3
     212:	2c f0       	brlt	.+10     	; 0x21e <_fpadd_parts+0x18c>
     214:	1c 01       	movw	r2, r24
     216:	aa 24       	eor	r10, r10
     218:	bb 24       	eor	r11, r11
     21a:	65 01       	movw	r12, r10
     21c:	03 c0       	rjmp	.+6      	; 0x224 <_fpadd_parts+0x192>
     21e:	ee 24       	eor	r14, r14
     220:	ff 24       	eor	r15, r15
     222:	87 01       	movw	r16, r14
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	9c 91       	ld	r25, X
     228:	d2 01       	movw	r26, r4
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	8c 91       	ld	r24, X
     22e:	98 17       	cp	r25, r24
     230:	09 f4       	brne	.+2      	; 0x234 <_fpadd_parts+0x1a2>
     232:	45 c0       	rjmp	.+138    	; 0x2be <_fpadd_parts+0x22c>
     234:	99 23       	and	r25, r25
     236:	39 f0       	breq	.+14     	; 0x246 <_fpadd_parts+0x1b4>
     238:	a8 01       	movw	r20, r16
     23a:	97 01       	movw	r18, r14
     23c:	2a 19       	sub	r18, r10
     23e:	3b 09       	sbc	r19, r11
     240:	4c 09       	sbc	r20, r12
     242:	5d 09       	sbc	r21, r13
     244:	06 c0       	rjmp	.+12     	; 0x252 <_fpadd_parts+0x1c0>
     246:	a6 01       	movw	r20, r12
     248:	95 01       	movw	r18, r10
     24a:	2e 19       	sub	r18, r14
     24c:	3f 09       	sbc	r19, r15
     24e:	40 0b       	sbc	r20, r16
     250:	51 0b       	sbc	r21, r17
     252:	57 fd       	sbrc	r21, 7
     254:	08 c0       	rjmp	.+16     	; 0x266 <_fpadd_parts+0x1d4>
     256:	11 82       	std	Z+1, r1	; 0x01
     258:	33 82       	std	Z+3, r3	; 0x03
     25a:	22 82       	std	Z+2, r2	; 0x02
     25c:	24 83       	std	Z+4, r18	; 0x04
     25e:	35 83       	std	Z+5, r19	; 0x05
     260:	46 83       	std	Z+6, r20	; 0x06
     262:	57 83       	std	Z+7, r21	; 0x07
     264:	1d c0       	rjmp	.+58     	; 0x2a0 <_fpadd_parts+0x20e>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	33 82       	std	Z+3, r3	; 0x03
     26c:	22 82       	std	Z+2, r2	; 0x02
     26e:	88 27       	eor	r24, r24
     270:	99 27       	eor	r25, r25
     272:	dc 01       	movw	r26, r24
     274:	82 1b       	sub	r24, r18
     276:	93 0b       	sbc	r25, r19
     278:	a4 0b       	sbc	r26, r20
     27a:	b5 0b       	sbc	r27, r21
     27c:	84 83       	std	Z+4, r24	; 0x04
     27e:	95 83       	std	Z+5, r25	; 0x05
     280:	a6 83       	std	Z+6, r26	; 0x06
     282:	b7 83       	std	Z+7, r27	; 0x07
     284:	0d c0       	rjmp	.+26     	; 0x2a0 <_fpadd_parts+0x20e>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	44 1f       	adc	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	24 83       	std	Z+4, r18	; 0x04
     290:	35 83       	std	Z+5, r19	; 0x05
     292:	46 83       	std	Z+6, r20	; 0x06
     294:	57 83       	std	Z+7, r21	; 0x07
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	93 83       	std	Z+3, r25	; 0x03
     29e:	82 83       	std	Z+2, r24	; 0x02
     2a0:	24 81       	ldd	r18, Z+4	; 0x04
     2a2:	35 81       	ldd	r19, Z+5	; 0x05
     2a4:	46 81       	ldd	r20, Z+6	; 0x06
     2a6:	57 81       	ldd	r21, Z+7	; 0x07
     2a8:	da 01       	movw	r26, r20
     2aa:	c9 01       	movw	r24, r18
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	a1 09       	sbc	r26, r1
     2b0:	b1 09       	sbc	r27, r1
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	af 4f       	sbci	r26, 0xFF	; 255
     2b8:	bf 43       	sbci	r27, 0x3F	; 63
     2ba:	28 f3       	brcs	.-54     	; 0x286 <_fpadd_parts+0x1f4>
     2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <_fpadd_parts+0x242>
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	33 82       	std	Z+3, r3	; 0x03
     2c2:	22 82       	std	Z+2, r2	; 0x02
     2c4:	ea 0c       	add	r14, r10
     2c6:	fb 1c       	adc	r15, r11
     2c8:	0c 1d       	adc	r16, r12
     2ca:	1d 1d       	adc	r17, r13
     2cc:	e4 82       	std	Z+4, r14	; 0x04
     2ce:	f5 82       	std	Z+5, r15	; 0x05
     2d0:	06 83       	std	Z+6, r16	; 0x06
     2d2:	17 83       	std	Z+7, r17	; 0x07
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 83       	st	Z, r24
     2d8:	24 81       	ldd	r18, Z+4	; 0x04
     2da:	35 81       	ldd	r19, Z+5	; 0x05
     2dc:	46 81       	ldd	r20, Z+6	; 0x06
     2de:	57 81       	ldd	r21, Z+7	; 0x07
     2e0:	57 ff       	sbrs	r21, 7
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <_fpadd_parts+0x286>
     2e4:	c9 01       	movw	r24, r18
     2e6:	aa 27       	eor	r26, r26
     2e8:	97 fd       	sbrc	r25, 7
     2ea:	a0 95       	com	r26
     2ec:	ba 2f       	mov	r27, r26
     2ee:	81 70       	andi	r24, 0x01	; 1
     2f0:	90 70       	andi	r25, 0x00	; 0
     2f2:	a0 70       	andi	r26, 0x00	; 0
     2f4:	b0 70       	andi	r27, 0x00	; 0
     2f6:	56 95       	lsr	r21
     2f8:	47 95       	ror	r20
     2fa:	37 95       	ror	r19
     2fc:	27 95       	ror	r18
     2fe:	82 2b       	or	r24, r18
     300:	93 2b       	or	r25, r19
     302:	a4 2b       	or	r26, r20
     304:	b5 2b       	or	r27, r21
     306:	84 83       	std	Z+4, r24	; 0x04
     308:	95 83       	std	Z+5, r25	; 0x05
     30a:	a6 83       	std	Z+6, r26	; 0x06
     30c:	b7 83       	std	Z+7, r27	; 0x07
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
     318:	df 01       	movw	r26, r30
     31a:	01 c0       	rjmp	.+2      	; 0x31e <_fpadd_parts+0x28c>
     31c:	d2 01       	movw	r26, r4
     31e:	cd 01       	movw	r24, r26
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	e2 e1       	ldi	r30, 0x12	; 18
     326:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__epilogue_restores__>

0000032a <__subsf3>:
     32a:	a0 e2       	ldi	r26, 0x20	; 32
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	eb e9       	ldi	r30, 0x9B	; 155
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x18>
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	2d 83       	std	Y+5, r18	; 0x05
     340:	3e 83       	std	Y+6, r19	; 0x06
     342:	4f 83       	std	Y+7, r20	; 0x07
     344:	58 87       	std	Y+8, r21	; 0x08
     346:	e9 e0       	ldi	r30, 0x09	; 9
     348:	ee 2e       	mov	r14, r30
     34a:	f1 2c       	mov	r15, r1
     34c:	ec 0e       	add	r14, r28
     34e:	fd 1e       	adc	r15, r29
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	b7 01       	movw	r22, r14
     356:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     35a:	8e 01       	movw	r16, r28
     35c:	0f 5e       	subi	r16, 0xEF	; 239
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	ce 01       	movw	r24, r28
     362:	05 96       	adiw	r24, 0x05	; 5
     364:	b8 01       	movw	r22, r16
     366:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     36a:	8a 89       	ldd	r24, Y+18	; 0x12
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	89 27       	eor	r24, r25
     370:	8a 8b       	std	Y+18, r24	; 0x12
     372:	c7 01       	movw	r24, r14
     374:	b8 01       	movw	r22, r16
     376:	ae 01       	movw	r20, r28
     378:	47 5e       	subi	r20, 0xE7	; 231
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     380:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__pack_f>
     384:	a0 96       	adiw	r28, 0x20	; 32
     386:	e6 e0       	ldi	r30, 0x06	; 6
     388:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x18>

0000038c <__addsf3>:
     38c:	a0 e2       	ldi	r26, 0x20	; 32
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	ec ec       	ldi	r30, 0xCC	; 204
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x18>
     398:	69 83       	std	Y+1, r22	; 0x01
     39a:	7a 83       	std	Y+2, r23	; 0x02
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	2d 83       	std	Y+5, r18	; 0x05
     3a2:	3e 83       	std	Y+6, r19	; 0x06
     3a4:	4f 83       	std	Y+7, r20	; 0x07
     3a6:	58 87       	std	Y+8, r21	; 0x08
     3a8:	f9 e0       	ldi	r31, 0x09	; 9
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	ec 0e       	add	r14, r28
     3b0:	fd 1e       	adc	r15, r29
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5e       	subi	r16, 0xEF	; 239
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	ce 01       	movw	r24, r28
     3c4:	05 96       	adiw	r24, 0x05	; 5
     3c6:	b8 01       	movw	r22, r16
     3c8:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     3cc:	c7 01       	movw	r24, r14
     3ce:	b8 01       	movw	r22, r16
     3d0:	ae 01       	movw	r20, r28
     3d2:	47 5e       	subi	r20, 0xE7	; 231
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     3da:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__pack_f>
     3de:	a0 96       	adiw	r28, 0x20	; 32
     3e0:	e6 e0       	ldi	r30, 0x06	; 6
     3e2:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x18>

000003e6 <__mulsf3>:
     3e6:	a0 e2       	ldi	r26, 0x20	; 32
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e9 ef       	ldi	r30, 0xF9	; 249
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__prologue_saves__>
     3f2:	69 83       	std	Y+1, r22	; 0x01
     3f4:	7a 83       	std	Y+2, r23	; 0x02
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	2d 83       	std	Y+5, r18	; 0x05
     3fc:	3e 83       	std	Y+6, r19	; 0x06
     3fe:	4f 83       	std	Y+7, r20	; 0x07
     400:	58 87       	std	Y+8, r21	; 0x08
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	be 01       	movw	r22, r28
     408:	67 5f       	subi	r22, 0xF7	; 247
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     410:	ce 01       	movw	r24, r28
     412:	05 96       	adiw	r24, 0x05	; 5
     414:	be 01       	movw	r22, r28
     416:	6f 5e       	subi	r22, 0xEF	; 239
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     41e:	99 85       	ldd	r25, Y+9	; 0x09
     420:	92 30       	cpi	r25, 0x02	; 2
     422:	88 f0       	brcs	.+34     	; 0x446 <__mulsf3+0x60>
     424:	89 89       	ldd	r24, Y+17	; 0x11
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	c8 f0       	brcs	.+50     	; 0x45c <__mulsf3+0x76>
     42a:	94 30       	cpi	r25, 0x04	; 4
     42c:	19 f4       	brne	.+6      	; 0x434 <__mulsf3+0x4e>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	51 f4       	brne	.+20     	; 0x446 <__mulsf3+0x60>
     432:	04 c0       	rjmp	.+8      	; 0x43c <__mulsf3+0x56>
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	29 f4       	brne	.+10     	; 0x442 <__mulsf3+0x5c>
     438:	92 30       	cpi	r25, 0x02	; 2
     43a:	81 f4       	brne	.+32     	; 0x45c <__mulsf3+0x76>
     43c:	80 e6       	ldi	r24, 0x60	; 96
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	c6 c0       	rjmp	.+396    	; 0x5ce <__stack+0x16f>
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	49 f4       	brne	.+18     	; 0x458 <__mulsf3+0x72>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	9a 85       	ldd	r25, Y+10	; 0x0a
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	98 13       	cpse	r25, r24
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	2a 87       	std	Y+10, r18	; 0x0a
     452:	ce 01       	movw	r24, r28
     454:	09 96       	adiw	r24, 0x09	; 9
     456:	bb c0       	rjmp	.+374    	; 0x5ce <__stack+0x16f>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	49 f4       	brne	.+18     	; 0x46e <__stack+0xf>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	9a 85       	ldd	r25, Y+10	; 0x0a
     460:	8a 89       	ldd	r24, Y+18	; 0x12
     462:	98 13       	cpse	r25, r24
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	2a 8b       	std	Y+18, r18	; 0x12
     468:	ce 01       	movw	r24, r28
     46a:	41 96       	adiw	r24, 0x11	; 17
     46c:	b0 c0       	rjmp	.+352    	; 0x5ce <__stack+0x16f>
     46e:	2d 84       	ldd	r2, Y+13	; 0x0d
     470:	3e 84       	ldd	r3, Y+14	; 0x0e
     472:	4f 84       	ldd	r4, Y+15	; 0x0f
     474:	58 88       	ldd	r5, Y+16	; 0x10
     476:	6d 88       	ldd	r6, Y+21	; 0x15
     478:	7e 88       	ldd	r7, Y+22	; 0x16
     47a:	8f 88       	ldd	r8, Y+23	; 0x17
     47c:	98 8c       	ldd	r9, Y+24	; 0x18
     47e:	ee 24       	eor	r14, r14
     480:	ff 24       	eor	r15, r15
     482:	87 01       	movw	r16, r14
     484:	aa 24       	eor	r10, r10
     486:	bb 24       	eor	r11, r11
     488:	65 01       	movw	r12, r10
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	e0 e0       	ldi	r30, 0x00	; 0
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	c1 01       	movw	r24, r2
     498:	81 70       	andi	r24, 0x01	; 1
     49a:	90 70       	andi	r25, 0x00	; 0
     49c:	89 2b       	or	r24, r25
     49e:	e9 f0       	breq	.+58     	; 0x4da <__stack+0x7b>
     4a0:	e6 0c       	add	r14, r6
     4a2:	f7 1c       	adc	r15, r7
     4a4:	08 1d       	adc	r16, r8
     4a6:	19 1d       	adc	r17, r9
     4a8:	9a 01       	movw	r18, r20
     4aa:	ab 01       	movw	r20, r22
     4ac:	2a 0d       	add	r18, r10
     4ae:	3b 1d       	adc	r19, r11
     4b0:	4c 1d       	adc	r20, r12
     4b2:	5d 1d       	adc	r21, r13
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e6 14       	cp	r14, r6
     4be:	f7 04       	cpc	r15, r7
     4c0:	08 05       	cpc	r16, r8
     4c2:	19 05       	cpc	r17, r9
     4c4:	20 f4       	brcc	.+8      	; 0x4ce <__stack+0x6f>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	a0 e0       	ldi	r26, 0x00	; 0
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	ba 01       	movw	r22, r20
     4d0:	a9 01       	movw	r20, r18
     4d2:	48 0f       	add	r20, r24
     4d4:	59 1f       	adc	r21, r25
     4d6:	6a 1f       	adc	r22, r26
     4d8:	7b 1f       	adc	r23, r27
     4da:	aa 0c       	add	r10, r10
     4dc:	bb 1c       	adc	r11, r11
     4de:	cc 1c       	adc	r12, r12
     4e0:	dd 1c       	adc	r13, r13
     4e2:	97 fe       	sbrs	r9, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <__stack+0x97>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	a8 2a       	or	r10, r24
     4f0:	b9 2a       	or	r11, r25
     4f2:	ca 2a       	or	r12, r26
     4f4:	db 2a       	or	r13, r27
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	e0 32       	cpi	r30, 0x20	; 32
     4fa:	f1 05       	cpc	r31, r1
     4fc:	49 f0       	breq	.+18     	; 0x510 <__stack+0xb1>
     4fe:	66 0c       	add	r6, r6
     500:	77 1c       	adc	r7, r7
     502:	88 1c       	adc	r8, r8
     504:	99 1c       	adc	r9, r9
     506:	56 94       	lsr	r5
     508:	47 94       	ror	r4
     50a:	37 94       	ror	r3
     50c:	27 94       	ror	r2
     50e:	c3 cf       	rjmp	.-122    	; 0x496 <__stack+0x37>
     510:	fa 85       	ldd	r31, Y+10	; 0x0a
     512:	ea 89       	ldd	r30, Y+18	; 0x12
     514:	2b 89       	ldd	r18, Y+19	; 0x13
     516:	3c 89       	ldd	r19, Y+20	; 0x14
     518:	8b 85       	ldd	r24, Y+11	; 0x0b
     51a:	9c 85       	ldd	r25, Y+12	; 0x0c
     51c:	28 0f       	add	r18, r24
     51e:	39 1f       	adc	r19, r25
     520:	2e 5f       	subi	r18, 0xFE	; 254
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	17 c0       	rjmp	.+46     	; 0x554 <__stack+0xf5>
     526:	ca 01       	movw	r24, r20
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	61 f0       	breq	.+24     	; 0x548 <__stack+0xe9>
     530:	16 95       	lsr	r17
     532:	07 95       	ror	r16
     534:	f7 94       	ror	r15
     536:	e7 94       	ror	r14
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b0 e8       	ldi	r27, 0x80	; 128
     540:	e8 2a       	or	r14, r24
     542:	f9 2a       	or	r15, r25
     544:	0a 2b       	or	r16, r26
     546:	1b 2b       	or	r17, r27
     548:	76 95       	lsr	r23
     54a:	67 95       	ror	r22
     54c:	57 95       	ror	r21
     54e:	47 95       	ror	r20
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	77 fd       	sbrc	r23, 7
     556:	e7 cf       	rjmp	.-50     	; 0x526 <__stack+0xc7>
     558:	0c c0       	rjmp	.+24     	; 0x572 <__stack+0x113>
     55a:	44 0f       	add	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	66 1f       	adc	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	17 fd       	sbrc	r17, 7
     564:	41 60       	ori	r20, 0x01	; 1
     566:	ee 0c       	add	r14, r14
     568:	ff 1c       	adc	r15, r15
     56a:	00 1f       	adc	r16, r16
     56c:	11 1f       	adc	r17, r17
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	30 40       	sbci	r19, 0x00	; 0
     572:	40 30       	cpi	r20, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	59 07       	cpc	r21, r25
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	69 07       	cpc	r22, r25
     57c:	90 e4       	ldi	r25, 0x40	; 64
     57e:	79 07       	cpc	r23, r25
     580:	60 f3       	brcs	.-40     	; 0x55a <__stack+0xfb>
     582:	2b 8f       	std	Y+27, r18	; 0x1b
     584:	3c 8f       	std	Y+28, r19	; 0x1c
     586:	db 01       	movw	r26, r22
     588:	ca 01       	movw	r24, r20
     58a:	8f 77       	andi	r24, 0x7F	; 127
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	a0 70       	andi	r26, 0x00	; 0
     590:	b0 70       	andi	r27, 0x00	; 0
     592:	80 34       	cpi	r24, 0x40	; 64
     594:	91 05       	cpc	r25, r1
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	61 f4       	brne	.+24     	; 0x5b4 <__stack+0x155>
     59c:	47 fd       	sbrc	r20, 7
     59e:	0a c0       	rjmp	.+20     	; 0x5b4 <__stack+0x155>
     5a0:	e1 14       	cp	r14, r1
     5a2:	f1 04       	cpc	r15, r1
     5a4:	01 05       	cpc	r16, r1
     5a6:	11 05       	cpc	r17, r1
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <__stack+0x155>
     5aa:	40 5c       	subi	r20, 0xC0	; 192
     5ac:	5f 4f       	sbci	r21, 0xFF	; 255
     5ae:	6f 4f       	sbci	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	40 78       	andi	r20, 0x80	; 128
     5b4:	1a 8e       	std	Y+26, r1	; 0x1a
     5b6:	fe 17       	cp	r31, r30
     5b8:	11 f0       	breq	.+4      	; 0x5be <__stack+0x15f>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	8a 8f       	std	Y+26, r24	; 0x1a
     5be:	4d 8f       	std	Y+29, r20	; 0x1d
     5c0:	5e 8f       	std	Y+30, r21	; 0x1e
     5c2:	6f 8f       	std	Y+31, r22	; 0x1f
     5c4:	78 a3       	std	Y+32, r23	; 0x20
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	89 8f       	std	Y+25, r24	; 0x19
     5ca:	ce 01       	movw	r24, r28
     5cc:	49 96       	adiw	r24, 0x19	; 25
     5ce:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__pack_f>
     5d2:	a0 96       	adiw	r28, 0x20	; 32
     5d4:	e2 e1       	ldi	r30, 0x12	; 18
     5d6:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__epilogue_restores__>

000005da <__divsf3>:
     5da:	a8 e1       	ldi	r26, 0x18	; 24
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e3 ef       	ldi	r30, 0xF3	; 243
     5e0:	f2 e0       	ldi	r31, 0x02	; 2
     5e2:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__prologue_saves__+0x10>
     5e6:	69 83       	std	Y+1, r22	; 0x01
     5e8:	7a 83       	std	Y+2, r23	; 0x02
     5ea:	8b 83       	std	Y+3, r24	; 0x03
     5ec:	9c 83       	std	Y+4, r25	; 0x04
     5ee:	2d 83       	std	Y+5, r18	; 0x05
     5f0:	3e 83       	std	Y+6, r19	; 0x06
     5f2:	4f 83       	std	Y+7, r20	; 0x07
     5f4:	58 87       	std	Y+8, r21	; 0x08
     5f6:	b9 e0       	ldi	r27, 0x09	; 9
     5f8:	eb 2e       	mov	r14, r27
     5fa:	f1 2c       	mov	r15, r1
     5fc:	ec 0e       	add	r14, r28
     5fe:	fd 1e       	adc	r15, r29
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	b7 01       	movw	r22, r14
     606:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     60a:	8e 01       	movw	r16, r28
     60c:	0f 5e       	subi	r16, 0xEF	; 239
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	ce 01       	movw	r24, r28
     612:	05 96       	adiw	r24, 0x05	; 5
     614:	b8 01       	movw	r22, r16
     616:	0e 94 36 05 	call	0xa6c	; 0xa6c <__unpack_f>
     61a:	29 85       	ldd	r18, Y+9	; 0x09
     61c:	22 30       	cpi	r18, 0x02	; 2
     61e:	08 f4       	brcc	.+2      	; 0x622 <__divsf3+0x48>
     620:	7e c0       	rjmp	.+252    	; 0x71e <__divsf3+0x144>
     622:	39 89       	ldd	r19, Y+17	; 0x11
     624:	32 30       	cpi	r19, 0x02	; 2
     626:	10 f4       	brcc	.+4      	; 0x62c <__divsf3+0x52>
     628:	b8 01       	movw	r22, r16
     62a:	7c c0       	rjmp	.+248    	; 0x724 <__divsf3+0x14a>
     62c:	8a 85       	ldd	r24, Y+10	; 0x0a
     62e:	9a 89       	ldd	r25, Y+18	; 0x12
     630:	89 27       	eor	r24, r25
     632:	8a 87       	std	Y+10, r24	; 0x0a
     634:	24 30       	cpi	r18, 0x04	; 4
     636:	11 f0       	breq	.+4      	; 0x63c <__divsf3+0x62>
     638:	22 30       	cpi	r18, 0x02	; 2
     63a:	31 f4       	brne	.+12     	; 0x648 <__divsf3+0x6e>
     63c:	23 17       	cp	r18, r19
     63e:	09 f0       	breq	.+2      	; 0x642 <__divsf3+0x68>
     640:	6e c0       	rjmp	.+220    	; 0x71e <__divsf3+0x144>
     642:	60 e6       	ldi	r22, 0x60	; 96
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	6e c0       	rjmp	.+220    	; 0x724 <__divsf3+0x14a>
     648:	34 30       	cpi	r19, 0x04	; 4
     64a:	39 f4       	brne	.+14     	; 0x65a <__divsf3+0x80>
     64c:	1d 86       	std	Y+13, r1	; 0x0d
     64e:	1e 86       	std	Y+14, r1	; 0x0e
     650:	1f 86       	std	Y+15, r1	; 0x0f
     652:	18 8a       	std	Y+16, r1	; 0x10
     654:	1c 86       	std	Y+12, r1	; 0x0c
     656:	1b 86       	std	Y+11, r1	; 0x0b
     658:	04 c0       	rjmp	.+8      	; 0x662 <__divsf3+0x88>
     65a:	32 30       	cpi	r19, 0x02	; 2
     65c:	21 f4       	brne	.+8      	; 0x666 <__divsf3+0x8c>
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	89 87       	std	Y+9, r24	; 0x09
     662:	b7 01       	movw	r22, r14
     664:	5f c0       	rjmp	.+190    	; 0x724 <__divsf3+0x14a>
     666:	2b 85       	ldd	r18, Y+11	; 0x0b
     668:	3c 85       	ldd	r19, Y+12	; 0x0c
     66a:	8b 89       	ldd	r24, Y+19	; 0x13
     66c:	9c 89       	ldd	r25, Y+20	; 0x14
     66e:	28 1b       	sub	r18, r24
     670:	39 0b       	sbc	r19, r25
     672:	3c 87       	std	Y+12, r19	; 0x0c
     674:	2b 87       	std	Y+11, r18	; 0x0b
     676:	ed 84       	ldd	r14, Y+13	; 0x0d
     678:	fe 84       	ldd	r15, Y+14	; 0x0e
     67a:	0f 85       	ldd	r16, Y+15	; 0x0f
     67c:	18 89       	ldd	r17, Y+16	; 0x10
     67e:	ad 88       	ldd	r10, Y+21	; 0x15
     680:	be 88       	ldd	r11, Y+22	; 0x16
     682:	cf 88       	ldd	r12, Y+23	; 0x17
     684:	d8 8c       	ldd	r13, Y+24	; 0x18
     686:	ea 14       	cp	r14, r10
     688:	fb 04       	cpc	r15, r11
     68a:	0c 05       	cpc	r16, r12
     68c:	1d 05       	cpc	r17, r13
     68e:	40 f4       	brcc	.+16     	; 0x6a0 <__divsf3+0xc6>
     690:	ee 0c       	add	r14, r14
     692:	ff 1c       	adc	r15, r15
     694:	00 1f       	adc	r16, r16
     696:	11 1f       	adc	r17, r17
     698:	21 50       	subi	r18, 0x01	; 1
     69a:	30 40       	sbci	r19, 0x00	; 0
     69c:	3c 87       	std	Y+12, r19	; 0x0c
     69e:	2b 87       	std	Y+11, r18	; 0x0b
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	a0 e0       	ldi	r26, 0x00	; 0
     6ae:	b0 e4       	ldi	r27, 0x40	; 64
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	ea 14       	cp	r14, r10
     6b6:	fb 04       	cpc	r15, r11
     6b8:	0c 05       	cpc	r16, r12
     6ba:	1d 05       	cpc	r17, r13
     6bc:	40 f0       	brcs	.+16     	; 0x6ce <__divsf3+0xf4>
     6be:	28 2b       	or	r18, r24
     6c0:	39 2b       	or	r19, r25
     6c2:	4a 2b       	or	r20, r26
     6c4:	5b 2b       	or	r21, r27
     6c6:	ea 18       	sub	r14, r10
     6c8:	fb 08       	sbc	r15, r11
     6ca:	0c 09       	sbc	r16, r12
     6cc:	1d 09       	sbc	r17, r13
     6ce:	b6 95       	lsr	r27
     6d0:	a7 95       	ror	r26
     6d2:	97 95       	ror	r25
     6d4:	87 95       	ror	r24
     6d6:	ee 0c       	add	r14, r14
     6d8:	ff 1c       	adc	r15, r15
     6da:	00 1f       	adc	r16, r16
     6dc:	11 1f       	adc	r17, r17
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	7f 4f       	sbci	r23, 0xFF	; 255
     6e2:	6f 31       	cpi	r22, 0x1F	; 31
     6e4:	71 05       	cpc	r23, r1
     6e6:	31 f7       	brne	.-52     	; 0x6b4 <__divsf3+0xda>
     6e8:	da 01       	movw	r26, r20
     6ea:	c9 01       	movw	r24, r18
     6ec:	8f 77       	andi	r24, 0x7F	; 127
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	a0 70       	andi	r26, 0x00	; 0
     6f2:	b0 70       	andi	r27, 0x00	; 0
     6f4:	80 34       	cpi	r24, 0x40	; 64
     6f6:	91 05       	cpc	r25, r1
     6f8:	a1 05       	cpc	r26, r1
     6fa:	b1 05       	cpc	r27, r1
     6fc:	61 f4       	brne	.+24     	; 0x716 <__divsf3+0x13c>
     6fe:	27 fd       	sbrc	r18, 7
     700:	0a c0       	rjmp	.+20     	; 0x716 <__divsf3+0x13c>
     702:	e1 14       	cp	r14, r1
     704:	f1 04       	cpc	r15, r1
     706:	01 05       	cpc	r16, r1
     708:	11 05       	cpc	r17, r1
     70a:	29 f0       	breq	.+10     	; 0x716 <__divsf3+0x13c>
     70c:	20 5c       	subi	r18, 0xC0	; 192
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	4f 4f       	sbci	r20, 0xFF	; 255
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	20 78       	andi	r18, 0x80	; 128
     716:	2d 87       	std	Y+13, r18	; 0x0d
     718:	3e 87       	std	Y+14, r19	; 0x0e
     71a:	4f 87       	std	Y+15, r20	; 0x0f
     71c:	58 8b       	std	Y+16, r21	; 0x10
     71e:	be 01       	movw	r22, r28
     720:	67 5f       	subi	r22, 0xF7	; 247
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	cb 01       	movw	r24, r22
     726:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__pack_f>
     72a:	68 96       	adiw	r28, 0x18	; 24
     72c:	ea e0       	ldi	r30, 0x0A	; 10
     72e:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__epilogue_restores__+0x10>

00000732 <__floatunsisf>:
     732:	a8 e0       	ldi	r26, 0x08	; 8
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	ef e9       	ldi	r30, 0x9F	; 159
     738:	f3 e0       	ldi	r31, 0x03	; 3
     73a:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__prologue_saves__+0x10>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	81 05       	cpc	r24, r1
     748:	91 05       	cpc	r25, r1
     74a:	19 f4       	brne	.+6      	; 0x752 <__floatunsisf+0x20>
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	89 83       	std	Y+1, r24	; 0x01
     750:	60 c0       	rjmp	.+192    	; 0x812 <__floatunsisf+0xe0>
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	8e e1       	ldi	r24, 0x1E	; 30
     758:	c8 2e       	mov	r12, r24
     75a:	d1 2c       	mov	r13, r1
     75c:	dc 82       	std	Y+4, r13	; 0x04
     75e:	cb 82       	std	Y+3, r12	; 0x03
     760:	ed 82       	std	Y+5, r14	; 0x05
     762:	fe 82       	std	Y+6, r15	; 0x06
     764:	0f 83       	std	Y+7, r16	; 0x07
     766:	18 87       	std	Y+8, r17	; 0x08
     768:	c8 01       	movw	r24, r16
     76a:	b7 01       	movw	r22, r14
     76c:	0e 94 12 04 	call	0x824	; 0x824 <__clzsi2>
     770:	fc 01       	movw	r30, r24
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	f7 ff       	sbrs	r31, 7
     776:	3b c0       	rjmp	.+118    	; 0x7ee <__floatunsisf+0xbc>
     778:	22 27       	eor	r18, r18
     77a:	33 27       	eor	r19, r19
     77c:	2e 1b       	sub	r18, r30
     77e:	3f 0b       	sbc	r19, r31
     780:	57 01       	movw	r10, r14
     782:	68 01       	movw	r12, r16
     784:	02 2e       	mov	r0, r18
     786:	04 c0       	rjmp	.+8      	; 0x790 <__floatunsisf+0x5e>
     788:	d6 94       	lsr	r13
     78a:	c7 94       	ror	r12
     78c:	b7 94       	ror	r11
     78e:	a7 94       	ror	r10
     790:	0a 94       	dec	r0
     792:	d2 f7       	brpl	.-12     	; 0x788 <__floatunsisf+0x56>
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a0 e0       	ldi	r26, 0x00	; 0
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <__floatunsisf+0x7c>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	aa 1f       	adc	r26, r26
     7ac:	bb 1f       	adc	r27, r27
     7ae:	2a 95       	dec	r18
     7b0:	d2 f7       	brpl	.-12     	; 0x7a6 <__floatunsisf+0x74>
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	a1 09       	sbc	r26, r1
     7b6:	b1 09       	sbc	r27, r1
     7b8:	8e 21       	and	r24, r14
     7ba:	9f 21       	and	r25, r15
     7bc:	a0 23       	and	r26, r16
     7be:	b1 23       	and	r27, r17
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	a1 05       	cpc	r26, r1
     7c4:	b1 05       	cpc	r27, r1
     7c6:	21 f0       	breq	.+8      	; 0x7d0 <__floatunsisf+0x9e>
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	4a 29       	or	r20, r10
     7d2:	5b 29       	or	r21, r11
     7d4:	6c 29       	or	r22, r12
     7d6:	7d 29       	or	r23, r13
     7d8:	4d 83       	std	Y+5, r20	; 0x05
     7da:	5e 83       	std	Y+6, r21	; 0x06
     7dc:	6f 83       	std	Y+7, r22	; 0x07
     7de:	78 87       	std	Y+8, r23	; 0x08
     7e0:	8e e1       	ldi	r24, 0x1E	; 30
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	8e 1b       	sub	r24, r30
     7e6:	9f 0b       	sbc	r25, r31
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	12 c0       	rjmp	.+36     	; 0x812 <__floatunsisf+0xe0>
     7ee:	30 97       	sbiw	r30, 0x00	; 0
     7f0:	81 f0       	breq	.+32     	; 0x812 <__floatunsisf+0xe0>
     7f2:	0e 2e       	mov	r0, r30
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <__floatunsisf+0xcc>
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	0a 94       	dec	r0
     800:	d2 f7       	brpl	.-12     	; 0x7f6 <__floatunsisf+0xc4>
     802:	ed 82       	std	Y+5, r14	; 0x05
     804:	fe 82       	std	Y+6, r15	; 0x06
     806:	0f 83       	std	Y+7, r16	; 0x07
     808:	18 87       	std	Y+8, r17	; 0x08
     80a:	ce 1a       	sub	r12, r30
     80c:	df 0a       	sbc	r13, r31
     80e:	dc 82       	std	Y+4, r13	; 0x04
     810:	cb 82       	std	Y+3, r12	; 0x03
     812:	1a 82       	std	Y+2, r1	; 0x02
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__pack_f>
     81c:	28 96       	adiw	r28, 0x08	; 8
     81e:	ea e0       	ldi	r30, 0x0A	; 10
     820:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__epilogue_restores__+0x10>

00000824 <__clzsi2>:
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	7b 01       	movw	r14, r22
     82e:	8c 01       	movw	r16, r24
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	e8 16       	cp	r14, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	f8 06       	cpc	r15, r24
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	08 07       	cpc	r16, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	18 07       	cpc	r17, r24
     840:	88 f4       	brcc	.+34     	; 0x864 <__clzsi2+0x40>
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	e8 16       	cp	r14, r24
     846:	f1 04       	cpc	r15, r1
     848:	01 05       	cpc	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	31 f0       	breq	.+12     	; 0x85a <__clzsi2+0x36>
     84e:	28 f0       	brcs	.+10     	; 0x85a <__clzsi2+0x36>
     850:	88 e0       	ldi	r24, 0x08	; 8
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	17 c0       	rjmp	.+46     	; 0x888 <__clzsi2+0x64>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	a0 e0       	ldi	r26, 0x00	; 0
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	12 c0       	rjmp	.+36     	; 0x888 <__clzsi2+0x64>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	e8 16       	cp	r14, r24
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	f8 06       	cpc	r15, r24
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	08 07       	cpc	r16, r24
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	18 07       	cpc	r17, r24
     874:	28 f0       	brcs	.+10     	; 0x880 <__clzsi2+0x5c>
     876:	88 e1       	ldi	r24, 0x18	; 24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	04 c0       	rjmp	.+8      	; 0x888 <__clzsi2+0x64>
     880:	80 e1       	ldi	r24, 0x10	; 16
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a0 e0       	ldi	r26, 0x00	; 0
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	20 e2       	ldi	r18, 0x20	; 32
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	28 1b       	sub	r18, r24
     892:	39 0b       	sbc	r19, r25
     894:	4a 0b       	sbc	r20, r26
     896:	5b 0b       	sbc	r21, r27
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <__clzsi2+0x7e>
     89a:	16 95       	lsr	r17
     89c:	07 95       	ror	r16
     89e:	f7 94       	ror	r15
     8a0:	e7 94       	ror	r14
     8a2:	8a 95       	dec	r24
     8a4:	d2 f7       	brpl	.-12     	; 0x89a <__clzsi2+0x76>
     8a6:	f7 01       	movw	r30, r14
     8a8:	e8 59       	subi	r30, 0x98	; 152
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	80 81       	ld	r24, Z
     8ae:	28 1b       	sub	r18, r24
     8b0:	31 09       	sbc	r19, r1
     8b2:	41 09       	sbc	r20, r1
     8b4:	51 09       	sbc	r21, r1
     8b6:	c9 01       	movw	r24, r18
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	08 95       	ret

000008c2 <__pack_f>:
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	fc 01       	movw	r30, r24
     8ce:	e4 80       	ldd	r14, Z+4	; 0x04
     8d0:	f5 80       	ldd	r15, Z+5	; 0x05
     8d2:	06 81       	ldd	r16, Z+6	; 0x06
     8d4:	17 81       	ldd	r17, Z+7	; 0x07
     8d6:	d1 80       	ldd	r13, Z+1	; 0x01
     8d8:	80 81       	ld	r24, Z
     8da:	82 30       	cpi	r24, 0x02	; 2
     8dc:	48 f4       	brcc	.+18     	; 0x8f0 <__pack_f+0x2e>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 e1       	ldi	r26, 0x10	; 16
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	e8 2a       	or	r14, r24
     8e8:	f9 2a       	or	r15, r25
     8ea:	0a 2b       	or	r16, r26
     8ec:	1b 2b       	or	r17, r27
     8ee:	a5 c0       	rjmp	.+330    	; 0xa3a <__pack_f+0x178>
     8f0:	84 30       	cpi	r24, 0x04	; 4
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <__pack_f+0x34>
     8f4:	9f c0       	rjmp	.+318    	; 0xa34 <__pack_f+0x172>
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	21 f4       	brne	.+8      	; 0x902 <__pack_f+0x40>
     8fa:	ee 24       	eor	r14, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	87 01       	movw	r16, r14
     900:	05 c0       	rjmp	.+10     	; 0x90c <__pack_f+0x4a>
     902:	e1 14       	cp	r14, r1
     904:	f1 04       	cpc	r15, r1
     906:	01 05       	cpc	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__pack_f+0x50>
     90c:	e0 e0       	ldi	r30, 0x00	; 0
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	96 c0       	rjmp	.+300    	; 0xa3e <__pack_f+0x17c>
     912:	62 81       	ldd	r22, Z+2	; 0x02
     914:	73 81       	ldd	r23, Z+3	; 0x03
     916:	9f ef       	ldi	r25, 0xFF	; 255
     918:	62 38       	cpi	r22, 0x82	; 130
     91a:	79 07       	cpc	r23, r25
     91c:	0c f0       	brlt	.+2      	; 0x920 <__pack_f+0x5e>
     91e:	5b c0       	rjmp	.+182    	; 0x9d6 <__pack_f+0x114>
     920:	22 e8       	ldi	r18, 0x82	; 130
     922:	3f ef       	ldi	r19, 0xFF	; 255
     924:	26 1b       	sub	r18, r22
     926:	37 0b       	sbc	r19, r23
     928:	2a 31       	cpi	r18, 0x1A	; 26
     92a:	31 05       	cpc	r19, r1
     92c:	2c f0       	brlt	.+10     	; 0x938 <__pack_f+0x76>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	2a c0       	rjmp	.+84     	; 0x98c <__pack_f+0xca>
     938:	b8 01       	movw	r22, r16
     93a:	a7 01       	movw	r20, r14
     93c:	02 2e       	mov	r0, r18
     93e:	04 c0       	rjmp	.+8      	; 0x948 <__pack_f+0x86>
     940:	76 95       	lsr	r23
     942:	67 95       	ror	r22
     944:	57 95       	ror	r21
     946:	47 95       	ror	r20
     948:	0a 94       	dec	r0
     94a:	d2 f7       	brpl	.-12     	; 0x940 <__pack_f+0x7e>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e0       	ldi	r26, 0x00	; 0
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	04 c0       	rjmp	.+8      	; 0x95e <__pack_f+0x9c>
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	aa 1f       	adc	r26, r26
     95c:	bb 1f       	adc	r27, r27
     95e:	2a 95       	dec	r18
     960:	d2 f7       	brpl	.-12     	; 0x956 <__pack_f+0x94>
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	a1 09       	sbc	r26, r1
     966:	b1 09       	sbc	r27, r1
     968:	8e 21       	and	r24, r14
     96a:	9f 21       	and	r25, r15
     96c:	a0 23       	and	r26, r16
     96e:	b1 23       	and	r27, r17
     970:	00 97       	sbiw	r24, 0x00	; 0
     972:	a1 05       	cpc	r26, r1
     974:	b1 05       	cpc	r27, r1
     976:	21 f0       	breq	.+8      	; 0x980 <__pack_f+0xbe>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	9a 01       	movw	r18, r20
     982:	ab 01       	movw	r20, r22
     984:	28 2b       	or	r18, r24
     986:	39 2b       	or	r19, r25
     988:	4a 2b       	or	r20, r26
     98a:	5b 2b       	or	r21, r27
     98c:	da 01       	movw	r26, r20
     98e:	c9 01       	movw	r24, r18
     990:	8f 77       	andi	r24, 0x7F	; 127
     992:	90 70       	andi	r25, 0x00	; 0
     994:	a0 70       	andi	r26, 0x00	; 0
     996:	b0 70       	andi	r27, 0x00	; 0
     998:	80 34       	cpi	r24, 0x40	; 64
     99a:	91 05       	cpc	r25, r1
     99c:	a1 05       	cpc	r26, r1
     99e:	b1 05       	cpc	r27, r1
     9a0:	39 f4       	brne	.+14     	; 0x9b0 <__pack_f+0xee>
     9a2:	27 ff       	sbrs	r18, 7
     9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <__pack_f+0xf6>
     9a6:	20 5c       	subi	r18, 0xC0	; 192
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	4f 4f       	sbci	r20, 0xFF	; 255
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <__pack_f+0xf6>
     9b0:	21 5c       	subi	r18, 0xC1	; 193
     9b2:	3f 4f       	sbci	r19, 0xFF	; 255
     9b4:	4f 4f       	sbci	r20, 0xFF	; 255
     9b6:	5f 4f       	sbci	r21, 0xFF	; 255
     9b8:	e0 e0       	ldi	r30, 0x00	; 0
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	20 30       	cpi	r18, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	3a 07       	cpc	r19, r26
     9c2:	a0 e0       	ldi	r26, 0x00	; 0
     9c4:	4a 07       	cpc	r20, r26
     9c6:	a0 e4       	ldi	r26, 0x40	; 64
     9c8:	5a 07       	cpc	r21, r26
     9ca:	10 f0       	brcs	.+4      	; 0x9d0 <__pack_f+0x10e>
     9cc:	e1 e0       	ldi	r30, 0x01	; 1
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	79 01       	movw	r14, r18
     9d2:	8a 01       	movw	r16, r20
     9d4:	27 c0       	rjmp	.+78     	; 0xa24 <__pack_f+0x162>
     9d6:	60 38       	cpi	r22, 0x80	; 128
     9d8:	71 05       	cpc	r23, r1
     9da:	64 f5       	brge	.+88     	; 0xa34 <__pack_f+0x172>
     9dc:	fb 01       	movw	r30, r22
     9de:	e1 58       	subi	r30, 0x81	; 129
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	d8 01       	movw	r26, r16
     9e4:	c7 01       	movw	r24, r14
     9e6:	8f 77       	andi	r24, 0x7F	; 127
     9e8:	90 70       	andi	r25, 0x00	; 0
     9ea:	a0 70       	andi	r26, 0x00	; 0
     9ec:	b0 70       	andi	r27, 0x00	; 0
     9ee:	80 34       	cpi	r24, 0x40	; 64
     9f0:	91 05       	cpc	r25, r1
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	39 f4       	brne	.+14     	; 0xa06 <__pack_f+0x144>
     9f8:	e7 fe       	sbrs	r14, 7
     9fa:	0d c0       	rjmp	.+26     	; 0xa16 <__pack_f+0x154>
     9fc:	80 e4       	ldi	r24, 0x40	; 64
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__pack_f+0x14c>
     a06:	8f e3       	ldi	r24, 0x3F	; 63
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e0       	ldi	r26, 0x00	; 0
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 0e       	add	r14, r24
     a10:	f9 1e       	adc	r15, r25
     a12:	0a 1f       	adc	r16, r26
     a14:	1b 1f       	adc	r17, r27
     a16:	17 ff       	sbrs	r17, 7
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <__pack_f+0x162>
     a1a:	16 95       	lsr	r17
     a1c:	07 95       	ror	r16
     a1e:	f7 94       	ror	r15
     a20:	e7 94       	ror	r14
     a22:	31 96       	adiw	r30, 0x01	; 1
     a24:	87 e0       	ldi	r24, 0x07	; 7
     a26:	16 95       	lsr	r17
     a28:	07 95       	ror	r16
     a2a:	f7 94       	ror	r15
     a2c:	e7 94       	ror	r14
     a2e:	8a 95       	dec	r24
     a30:	d1 f7       	brne	.-12     	; 0xa26 <__pack_f+0x164>
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <__pack_f+0x17c>
     a34:	ee 24       	eor	r14, r14
     a36:	ff 24       	eor	r15, r15
     a38:	87 01       	movw	r16, r14
     a3a:	ef ef       	ldi	r30, 0xFF	; 255
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	6e 2f       	mov	r22, r30
     a40:	67 95       	ror	r22
     a42:	66 27       	eor	r22, r22
     a44:	67 95       	ror	r22
     a46:	90 2f       	mov	r25, r16
     a48:	9f 77       	andi	r25, 0x7F	; 127
     a4a:	d7 94       	ror	r13
     a4c:	dd 24       	eor	r13, r13
     a4e:	d7 94       	ror	r13
     a50:	8e 2f       	mov	r24, r30
     a52:	86 95       	lsr	r24
     a54:	49 2f       	mov	r20, r25
     a56:	46 2b       	or	r20, r22
     a58:	58 2f       	mov	r21, r24
     a5a:	5d 29       	or	r21, r13
     a5c:	b7 01       	movw	r22, r14
     a5e:	ca 01       	movw	r24, r20
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	08 95       	ret

00000a6c <__unpack_f>:
     a6c:	fc 01       	movw	r30, r24
     a6e:	db 01       	movw	r26, r22
     a70:	40 81       	ld	r20, Z
     a72:	51 81       	ldd	r21, Z+1	; 0x01
     a74:	22 81       	ldd	r18, Z+2	; 0x02
     a76:	62 2f       	mov	r22, r18
     a78:	6f 77       	andi	r22, 0x7F	; 127
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	22 1f       	adc	r18, r18
     a7e:	22 27       	eor	r18, r18
     a80:	22 1f       	adc	r18, r18
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	89 2f       	mov	r24, r25
     a86:	88 0f       	add	r24, r24
     a88:	82 2b       	or	r24, r18
     a8a:	28 2f       	mov	r18, r24
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	99 1f       	adc	r25, r25
     a90:	99 27       	eor	r25, r25
     a92:	99 1f       	adc	r25, r25
     a94:	11 96       	adiw	r26, 0x01	; 1
     a96:	9c 93       	st	X, r25
     a98:	11 97       	sbiw	r26, 0x01	; 1
     a9a:	21 15       	cp	r18, r1
     a9c:	31 05       	cpc	r19, r1
     a9e:	a9 f5       	brne	.+106    	; 0xb0a <__unpack_f+0x9e>
     aa0:	41 15       	cp	r20, r1
     aa2:	51 05       	cpc	r21, r1
     aa4:	61 05       	cpc	r22, r1
     aa6:	71 05       	cpc	r23, r1
     aa8:	11 f4       	brne	.+4      	; 0xaae <__unpack_f+0x42>
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	37 c0       	rjmp	.+110    	; 0xb1c <__unpack_f+0xb0>
     aae:	82 e8       	ldi	r24, 0x82	; 130
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	13 96       	adiw	r26, 0x03	; 3
     ab4:	9c 93       	st	X, r25
     ab6:	8e 93       	st	-X, r24
     ab8:	12 97       	sbiw	r26, 0x02	; 2
     aba:	9a 01       	movw	r18, r20
     abc:	ab 01       	movw	r20, r22
     abe:	67 e0       	ldi	r22, 0x07	; 7
     ac0:	22 0f       	add	r18, r18
     ac2:	33 1f       	adc	r19, r19
     ac4:	44 1f       	adc	r20, r20
     ac6:	55 1f       	adc	r21, r21
     ac8:	6a 95       	dec	r22
     aca:	d1 f7       	brne	.-12     	; 0xac0 <__unpack_f+0x54>
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	8c 93       	st	X, r24
     ad0:	0d c0       	rjmp	.+26     	; 0xaec <__unpack_f+0x80>
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	44 1f       	adc	r20, r20
     ad8:	55 1f       	adc	r21, r21
     ada:	12 96       	adiw	r26, 0x02	; 2
     adc:	8d 91       	ld	r24, X+
     ade:	9c 91       	ld	r25, X
     ae0:	13 97       	sbiw	r26, 0x03	; 3
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	20 30       	cpi	r18, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	38 07       	cpc	r19, r24
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	48 07       	cpc	r20, r24
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	58 07       	cpc	r21, r24
     afa:	58 f3       	brcs	.-42     	; 0xad2 <__unpack_f+0x66>
     afc:	14 96       	adiw	r26, 0x04	; 4
     afe:	2d 93       	st	X+, r18
     b00:	3d 93       	st	X+, r19
     b02:	4d 93       	st	X+, r20
     b04:	5c 93       	st	X, r21
     b06:	17 97       	sbiw	r26, 0x07	; 7
     b08:	08 95       	ret
     b0a:	2f 3f       	cpi	r18, 0xFF	; 255
     b0c:	31 05       	cpc	r19, r1
     b0e:	79 f4       	brne	.+30     	; 0xb2e <__unpack_f+0xc2>
     b10:	41 15       	cp	r20, r1
     b12:	51 05       	cpc	r21, r1
     b14:	61 05       	cpc	r22, r1
     b16:	71 05       	cpc	r23, r1
     b18:	19 f4       	brne	.+6      	; 0xb20 <__unpack_f+0xb4>
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	8c 93       	st	X, r24
     b1e:	08 95       	ret
     b20:	64 ff       	sbrs	r22, 4
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <__unpack_f+0xbe>
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	8c 93       	st	X, r24
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__unpack_f+0xe2>
     b2a:	1c 92       	st	X, r1
     b2c:	10 c0       	rjmp	.+32     	; 0xb4e <__unpack_f+0xe2>
     b2e:	2f 57       	subi	r18, 0x7F	; 127
     b30:	30 40       	sbci	r19, 0x00	; 0
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	3c 93       	st	X, r19
     b36:	2e 93       	st	-X, r18
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	8c 93       	st	X, r24
     b3e:	87 e0       	ldi	r24, 0x07	; 7
     b40:	44 0f       	add	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	66 1f       	adc	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	8a 95       	dec	r24
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0xd4>
     b4c:	70 64       	ori	r23, 0x40	; 64
     b4e:	14 96       	adiw	r26, 0x04	; 4
     b50:	4d 93       	st	X+, r20
     b52:	5d 93       	st	X+, r21
     b54:	6d 93       	st	X+, r22
     b56:	7c 93       	st	X, r23
     b58:	17 97       	sbiw	r26, 0x07	; 7
     b5a:	08 95       	ret

00000b5c <TIM0_voidInit>:

ptrFunc_Iv_Ov Global_ISR_TIM0_OVF_ptr = NULL;
ptrFunc_Iv_Ov Global_ISR_TIM0_CM_ptr = NULL;


void TIM0_voidInit(void){
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TCCR0, WGM01);
	#elif TIM0_MODE == TIM0_MODE_CTC
		SET_BIT(TCCR0, WGM00);
		CLR_BIT(TCCR0, WGM01);
	#else
		SET_BIT(TCCR0, WGM00);
     b64:	a3 e5       	ldi	r26, 0x53	; 83
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e3 e5       	ldi	r30, 0x53	; 83
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 64       	ori	r24, 0x40	; 64
     b70:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
     b72:	a3 e5       	ldi	r26, 0x53	; 83
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e3 e5       	ldi	r30, 0x53	; 83
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	8c 93       	st	X, r24
	#endif
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <TIM0_voidSetPreValue>:



void TIM0_voidSetPreValue(u8 Copy_u8CounterStartValue){
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8CounterStartValue;
     b92:	e2 e5       	ldi	r30, 0x52	; 82
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 83       	st	Z, r24
}
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <TIM0_voidTimerStart>:

void TIM0_voidTimerStart(u8 Copy_u8Prescalar){
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= 0b11111000;
     bae:	a3 e5       	ldi	r26, 0x53	; 83
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e3 e5       	ldi	r30, 0x53	; 83
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	88 7f       	andi	r24, 0xF8	; 248
     bba:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescalar;
     bbc:	a3 e5       	ldi	r26, 0x53	; 83
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	90 81       	ld	r25, Z
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	89 2b       	or	r24, r25
     bca:	8c 93       	st	X, r24
}
     bcc:	0f 90       	pop	r0
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <TIM0_voidOVFINTControl>:

void TIM0_voidOVFINTControl(u8 Copy_u8INTcontrol){
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	0f 92       	push	r0
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8INTcontrol == TIM0_INT_ENABLE){
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	41 f4       	brne	.+16     	; 0xbf6 <TIM0_voidOVFINTControl+0x22>
		SET_BIT(TIMSK, TOIE0);
     be6:	a9 e5       	ldi	r26, 0x59	; 89
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e9 e5       	ldi	r30, 0x59	; 89
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	81 60       	ori	r24, 0x01	; 1
     bf2:	8c 93       	st	X, r24
     bf4:	07 c0       	rjmp	.+14     	; 0xc04 <TIM0_voidOVFINTControl+0x30>
	}
	else{
		CLR_BIT(TIMSK, TOIE0);
     bf6:	a9 e5       	ldi	r26, 0x59	; 89
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e9 e5       	ldi	r30, 0x59	; 89
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	8c 93       	st	X, r24
	}
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TIM0_voidSetCompareMatch>:

void TIM0_voidSetCompareMatch(u8 Copy_u8CompareMatchValue, u8 Copy_u8OC0PinAction){
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	00 d0       	rcall	.+0      	; 0xc12 <TIM0_voidSetCompareMatch+0x6>
     c12:	00 d0       	rcall	.+0      	; 0xc14 <TIM0_voidSetCompareMatch+0x8>
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8OC0PinAction){
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	3c 83       	std	Y+4, r19	; 0x04
     c24:	2b 83       	std	Y+3, r18	; 0x03
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	91 05       	cpc	r25, r1
     c2e:	c9 f0       	breq	.+50     	; 0xc62 <TIM0_voidSetCompareMatch+0x56>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	23 30       	cpi	r18, 0x03	; 3
     c36:	31 05       	cpc	r19, r1
     c38:	19 f1       	breq	.+70     	; 0xc80 <TIM0_voidSetCompareMatch+0x74>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	91 05       	cpc	r25, r1
     c42:	69 f5       	brne	.+90     	; 0xc9e <TIM0_voidSetCompareMatch+0x92>
		case TIM0_OC0_TGL:
			SET_BIT(TCCR0, COM00);
     c44:	a3 e5       	ldi	r26, 0x53	; 83
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e3 e5       	ldi	r30, 0x53	; 83
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 61       	ori	r24, 0x10	; 16
     c50:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
     c52:	a3 e5       	ldi	r26, 0x53	; 83
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e3 e5       	ldi	r30, 0x53	; 83
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8f 7d       	andi	r24, 0xDF	; 223
     c5e:	8c 93       	st	X, r24
     c60:	2c c0       	rjmp	.+88     	; 0xcba <TIM0_voidSetCompareMatch+0xae>
			break;

		case TIM0_OC0_CLR:
			CLR_BIT(TCCR0, COM00);
     c62:	a3 e5       	ldi	r26, 0x53	; 83
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e3 e5       	ldi	r30, 0x53	; 83
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8f 7e       	andi	r24, 0xEF	; 239
     c6e:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
     c70:	a3 e5       	ldi	r26, 0x53	; 83
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e3 e5       	ldi	r30, 0x53	; 83
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 62       	ori	r24, 0x20	; 32
     c7c:	8c 93       	st	X, r24
     c7e:	1d c0       	rjmp	.+58     	; 0xcba <TIM0_voidSetCompareMatch+0xae>
			break;

		case TIM0_OC0_SET:
			SET_BIT(TCCR0, COM00);
     c80:	a3 e5       	ldi	r26, 0x53	; 83
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e3 e5       	ldi	r30, 0x53	; 83
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 61       	ori	r24, 0x10	; 16
     c8c:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
     c8e:	a3 e5       	ldi	r26, 0x53	; 83
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e3 e5       	ldi	r30, 0x53	; 83
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 62       	ori	r24, 0x20	; 32
     c9a:	8c 93       	st	X, r24
     c9c:	0e c0       	rjmp	.+28     	; 0xcba <TIM0_voidSetCompareMatch+0xae>
			break;

		default:
			CLR_BIT(TCCR0, COM00);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8f 7e       	andi	r24, 0xEF	; 239
     caa:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8f 7d       	andi	r24, 0xDF	; 223
     cb8:	8c 93       	st	X, r24
			break;
	}
	OCR0 = Copy_u8CompareMatchValue;
     cba:	ec e5       	ldi	r30, 0x5C	; 92
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	80 83       	st	Z, r24
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <TIM0_voidSetCompareMatchValue>:

void TIM0_voidSetCompareMatchValue(u8 Copy_u8CompareMatchValue){
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompareMatchValue;
     cdc:	ec e5       	ldi	r30, 0x5C	; 92
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	80 83       	st	Z, r24
}
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TIM0_voidSetCompareMatchINTControl>:


void TIM0_voidSetCompareMatchINTControl(u8 Copy_u8INTControl){
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8INTControl == TIM0_INT_ENABLE){
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	41 f4       	brne	.+16     	; 0xd0e <TIM0_voidSetCompareMatchINTControl+0x22>
		SET_BIT(TIMSK, OCIE0);
     cfe:	a9 e5       	ldi	r26, 0x59	; 89
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e9 e5       	ldi	r30, 0x59	; 89
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	82 60       	ori	r24, 0x02	; 2
     d0a:	8c 93       	st	X, r24
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <TIM0_voidSetCompareMatchINTControl+0x30>
	}
	else{
		CLR_BIT(TIMSK, OCIE0);
     d0e:	a9 e5       	ldi	r26, 0x59	; 89
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e9 e5       	ldi	r30, 0x59	; 89
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	8c 93       	st	X, r24
	}
}
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <TIM0_voidTimerStop>:

void TIM0_voidTimerStop (void){
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 7f       	andi	r24, 0xF8	; 248
     d38:	8c 93       	st	X, r24

}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <INT_voidOVFCallback>:

void INT_voidOVFCallback(ptrFunc_Iv_Ov Copy_pfTIM0OVF){
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <INT_voidOVFCallback+0x6>
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
	Global_ISR_TIM0_OVF_ptr = Copy_pfTIM0OVF;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	90 93 69 01 	sts	0x0169, r25
     d56:	80 93 68 01 	sts	0x0168, r24
}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <INT_voidCompareMatchCallback>:
void INT_voidCompareMatchCallback(ptrFunc_Iv_Ov Copy_pfTIM0CompareMatch){
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	00 d0       	rcall	.+0      	; 0xd6a <INT_voidCompareMatchCallback+0x6>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
	Global_ISR_TIM0_CM_ptr = Copy_pfTIM0CompareMatch;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	90 93 6b 01 	sts	0x016B, r25
     d7a:	80 93 6a 01 	sts	0x016A, r24

}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIM0_voidPWMGenerator>:

void TIM0_voidPWMGenerator(u8 Copy_u8DutyCycle, u8 Copy_u8C0PinAction){
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <TIM0_voidPWMGenerator+0x6>
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	6a 83       	std	Y+2, r22	; 0x02
	#if TIM0_MODE == TIM0_MODE_FAST_PWM
		if(Copy_u8C0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	f1 f4       	brne	.+60     	; 0xdd8 <TIM0_voidPWMGenerator+0x50>
			SET_BIT(TCCR0, COM00);
     d9c:	a3 e5       	ldi	r26, 0x53	; 83
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e3 e5       	ldi	r30, 0x53	; 83
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 61       	ori	r24, 0x10	; 16
     da8:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
     daa:	a3 e5       	ldi	r26, 0x53	; 83
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e3 e5       	ldi	r30, 0x53	; 83
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 62       	ori	r24, 0x20	; 32
     db6:	8c 93       	st	X, r24
			OCR0 = 256 - (Copy_u8DutyCycle * 256)/100;
     db8:	ec e5       	ldi	r30, 0x5C	; 92
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	98 2f       	mov	r25, r24
     dc4:	88 27       	eor	r24, r24
     dc6:	24 e6       	ldi	r18, 0x64	; 100
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	b9 01       	movw	r22, r18
     dcc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__divmodhi4>
     dd0:	cb 01       	movw	r24, r22
     dd2:	81 95       	neg	r24
     dd4:	80 83       	st	Z, r24
     dd6:	1c c0       	rjmp	.+56     	; 0xe10 <TIM0_voidPWMGenerator+0x88>

		}
		else{
			CLR_BIT(TCCR0, COM00);
     dd8:	a3 e5       	ldi	r26, 0x53	; 83
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e3 e5       	ldi	r30, 0x53	; 83
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8f 7e       	andi	r24, 0xEF	; 239
     de4:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
     de6:	a3 e5       	ldi	r26, 0x53	; 83
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e3 e5       	ldi	r30, 0x53	; 83
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 62       	ori	r24, 0x20	; 32
     df2:	8c 93       	st	X, r24
			OCR0 = (Copy_u8DutyCycle * 256)/100;
     df4:	ec e5       	ldi	r30, 0x5C	; 92
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	98 2f       	mov	r25, r24
     e00:	88 27       	eor	r24, r24
     e02:	24 e6       	ldi	r18, 0x64	; 100
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	b9 01       	movw	r22, r18
     e08:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__divmodhi4>
     e0c:	cb 01       	movw	r24, r22
     e0e:	80 83       	st	Z, r24
			OCR0 = (Copy_u8DutyCycle * 510)/100/2;

		}

	#endif
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <__vector_9>:




ISR(TIMER0_OVF_vect){
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	6f 93       	push	r22
     e2e:	7f 93       	push	r23
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
     e34:	af 93       	push	r26
     e36:	bf 93       	push	r27
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_TIM0_OVF_ptr != NULL){
     e44:	80 91 68 01 	lds	r24, 0x0168
     e48:	90 91 69 01 	lds	r25, 0x0169
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	29 f0       	breq	.+10     	; 0xe5a <__vector_9+0x40>
		Global_ISR_TIM0_OVF_ptr();
     e50:	e0 91 68 01 	lds	r30, 0x0168
     e54:	f0 91 69 01 	lds	r31, 0x0169
     e58:	09 95       	icall
	}
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_19>:

ISR(TIMER0_COMP_vect){
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	if(Global_ISR_TIM0_CM_ptr != NULL){
     eaa:	80 91 6a 01 	lds	r24, 0x016A
     eae:	90 91 6b 01 	lds	r25, 0x016B
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	29 f0       	breq	.+10     	; 0xec0 <__vector_19+0x40>
		Global_ISR_TIM0_CM_ptr();
     eb6:	e0 91 6a 01 	lds	r30, 0x016A
     eba:	f0 91 6b 01 	lds	r31, 0x016B
     ebe:	09 95       	icall
	}
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit	(u8 Copy_u8Prescaler)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01

	/*	Select Voltage Reference								*/

	#if		ADC_REF_VOLT == ADC_AVCC
		SET_BIT(ADMUX,REFS0);
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS1);
	#endif

	/* Select Adjustment 										*/
		#if ADC_ADJUST == ADC_RIGHT_ADJUST
			CLR_BIT(ADMUX,ADLAR);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24
	/**/
	// Enable Triggering MODE
	#if ADC_TRIGGER == AUTOTRIGGED_OFF
		CLR_BIT(ADCSRA,ADATE);
	#else
		SET_BIT(ADCSRA,ADATE);
     f1c:	a6 e2       	ldi	r26, 0x26	; 38
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	8c 93       	st	X, r24
		// Select Triggering Source
		#if TRIGGER_SOURCE == FREE_RUNNING
			CLR_BIT(SFIOR,ADTS0);
     f2a:	a0 e5       	ldi	r26, 0x50	; 80
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e0 e5       	ldi	r30, 0x50	; 80
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7d       	andi	r24, 0xDF	; 223
     f36:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS1);
     f38:	a0 e5       	ldi	r26, 0x50	; 80
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e0 e5       	ldi	r30, 0x50	; 80
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8f 7b       	andi	r24, 0xBF	; 191
     f44:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS2);
     f46:	a0 e5       	ldi	r26, 0x50	; 80
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e0 e5       	ldi	r30, 0x50	; 80
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 77       	andi	r24, 0x7F	; 127
     f52:	8c 93       	st	X, r24
			SET_BIT(SFIOR,ADTS2);
		#endif
	#endif

	/*	Select Conversion Speed									*/
		ADCSRA &= 0b11111000;
     f54:	a6 e2       	ldi	r26, 0x26	; 38
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 7f       	andi	r24, 0xF8	; 248
     f60:	8c 93       	st	X, r24
		ADCSRA |= Copy_u8Prescaler;
     f62:	a6 e2       	ldi	r26, 0x26	; 38
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 e2       	ldi	r30, 0x26	; 38
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	90 81       	ld	r25, Z
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	89 2b       	or	r24, r25
     f70:	8c 93       	st	X, r24

	/*	Turn on ADC Module	(Turn off after use to save power)	*/
	SET_BIT(ADCSRA,ADEN);
     f72:	a6 e2       	ldi	r26, 0x26	; 38
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e6 e2       	ldi	r30, 0x26	; 38
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	8c 93       	st	X, r24

}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ADC_u8GetDigital>:
u16  ADC_u8GetDigital		(u8 Copy_u8Channel)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <ADC_u8GetDigital+0x6>
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	8b 83       	std	Y+3, r24	; 0x03
	u16 data = 0;
     f96:	1a 82       	std	Y+2, r1	; 0x02
     f98:	19 82       	std	Y+1, r1	; 0x01
	/* Select Channel 	*/
	ADMUX &= 0b11100000;
     f9a:	a7 e2       	ldi	r26, 0x27	; 39
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e7 e2       	ldi	r30, 0x27	; 39
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 7e       	andi	r24, 0xE0	; 224
     fa6:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
     fa8:	a7 e2       	ldi	r26, 0x27	; 39
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e7 e2       	ldi	r30, 0x27	; 39
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	90 81       	ld	r25, Z
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	89 2b       	or	r24, r25
     fb6:	8c 93       	st	X, r24
			// Start Conversion
			SET_BIT(ADCSRA,ADSC);
	   }

	/* Wait for Conversion */
	while(GET_BIT(ADCSRA,ADIF) == 0);
     fb8:	e6 e2       	ldi	r30, 0x26	; 38
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	82 95       	swap	r24
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	a9 f3       	breq	.-22     	; 0xfb8 <ADC_u8GetDigital+0x30>
	SET_BIT(ADCSRA,ADIF);
     fce:	a6 e2       	ldi	r26, 0x26	; 38
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 61       	ori	r24, 0x10	; 16
     fda:	8c 93       	st	X, r24

	/* Load the Word */
	data = ADC;
     fdc:	e4 e2       	ldi	r30, 0x24	; 36
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01

	return data;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <ADC_voidDisable>:

void ADC_voidDisable(void)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	/*	Turn off ADC Module	(Turn off after use to save power)	*/
	CLR_BIT(ADCSRA, ADEN);
    1000:	a6 e2       	ldi	r26, 0x26	; 38
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e6 e2       	ldi	r30, 0x26	; 38
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 77       	andi	r24, 0x7F	; 127
    100c:	8c 93       	st	X, r24
}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <ADC_voidEnable>:

void ADC_voidEnable(void)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADEN);
    101c:	a6 e2       	ldi	r26, 0x26	; 38
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e2       	ldi	r30, 0x26	; 38
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 68       	ori	r24, 0x80	; 128
    1028:	8c 93       	st	X, r24
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <ADC_voidSetAutoTriggerSource>:

void ADC_voidSetAutoTriggerSource(u8 copy_u8AutoTriggerSource)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
	#if (TRIGGER_SOURCE == FREE_RUNNING)
		
		CLR_BIT(SFIOR, ADTS0);
    103c:	a0 e5       	ldi	r26, 0x50	; 80
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e0 e5       	ldi	r30, 0x50	; 80
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8f 7d       	andi	r24, 0xDF	; 223
    1048:	8c 93       	st	X, r24
		CLR_BIT(SFIOR, ADTS1);
    104a:	a0 e5       	ldi	r26, 0x50	; 80
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e0 e5       	ldi	r30, 0x50	; 80
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8f 7b       	andi	r24, 0xBF	; 191
    1056:	8c 93       	st	X, r24
		CLR_BIT(SFIOR, ADTS2);
    1058:	a0 e5       	ldi	r26, 0x50	; 80
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e0 e5       	ldi	r30, 0x50	; 80
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 77       	andi	r24, 0x7F	; 127
    1064:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS0);
		SET_BIT(SFIOR,ADTS1);
		SET_BIT(SFIOR,ADTS2);
		
	#endif
}
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <ADC_voidSetPrescaler>:

void ADC_voidSetPrescaler(u8 copy_u8Prescaler)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <ADC_voidSetPrescaler+0x6>
    1074:	0f 92       	push	r0
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	89 83       	std	Y+1, r24	; 0x01
	
	ADCSRA &= ADC_PRESCALER_MASK;
    107c:	a6 e2       	ldi	r26, 0x26	; 38
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e6 e2       	ldi	r30, 0x26	; 38
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 7f       	andi	r24, 0xF8	; 248
    1088:	8c 93       	st	X, r24
	
	switch (copy_u8Prescaler)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3b 83       	std	Y+3, r19	; 0x03
    1092:	2a 83       	std	Y+2, r18	; 0x02
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	9b 81       	ldd	r25, Y+3	; 0x03
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	91 05       	cpc	r25, r1
    109c:	e9 f1       	breq	.+122    	; 0x1118 <ADC_voidSetPrescaler+0xaa>
    109e:	2a 81       	ldd	r18, Y+2	; 0x02
    10a0:	3b 81       	ldd	r19, Y+3	; 0x03
    10a2:	25 30       	cpi	r18, 0x05	; 5
    10a4:	31 05       	cpc	r19, r1
    10a6:	84 f4       	brge	.+32     	; 0x10c8 <ADC_voidSetPrescaler+0x5a>
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	91 05       	cpc	r25, r1
    10b0:	19 f1       	breq	.+70     	; 0x10f8 <ADC_voidSetPrescaler+0x8a>
    10b2:	2a 81       	ldd	r18, Y+2	; 0x02
    10b4:	3b 81       	ldd	r19, Y+3	; 0x03
    10b6:	23 30       	cpi	r18, 0x03	; 3
    10b8:	31 05       	cpc	r19, r1
    10ba:	34 f5       	brge	.+76     	; 0x1108 <ADC_voidSetPrescaler+0x9a>
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	9b 81       	ldd	r25, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	91 05       	cpc	r25, r1
    10c4:	89 f0       	breq	.+34     	; 0x10e8 <ADC_voidSetPrescaler+0x7a>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <ADC_voidSetPrescaler+0xe8>
    10c8:	2a 81       	ldd	r18, Y+2	; 0x02
    10ca:	3b 81       	ldd	r19, Y+3	; 0x03
    10cc:	26 30       	cpi	r18, 0x06	; 6
    10ce:	31 05       	cpc	r19, r1
    10d0:	99 f1       	breq	.+102    	; 0x1138 <ADC_voidSetPrescaler+0xca>
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	9b 81       	ldd	r25, Y+3	; 0x03
    10d6:	86 30       	cpi	r24, 0x06	; 6
    10d8:	91 05       	cpc	r25, r1
    10da:	34 f1       	brlt	.+76     	; 0x1128 <ADC_voidSetPrescaler+0xba>
    10dc:	2a 81       	ldd	r18, Y+2	; 0x02
    10de:	3b 81       	ldd	r19, Y+3	; 0x03
    10e0:	27 30       	cpi	r18, 0x07	; 7
    10e2:	31 05       	cpc	r19, r1
    10e4:	89 f1       	breq	.+98     	; 0x1148 <ADC_voidSetPrescaler+0xda>
    10e6:	37 c0       	rjmp	.+110    	; 0x1156 <ADC_voidSetPrescaler+0xe8>
	{
		case ADC_DIV_2  :	ADCSRA |= ADC_DIV_2;	break;
    10e8:	a6 e2       	ldi	r26, 0x26	; 38
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e6 e2       	ldi	r30, 0x26	; 38
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	8c 93       	st	X, r24
    10f6:	2f c0       	rjmp	.+94     	; 0x1156 <ADC_voidSetPrescaler+0xe8>
		case ADC_DIV_4  :	ADCSRA |= ADC_DIV_4;	break;
    10f8:	a6 e2       	ldi	r26, 0x26	; 38
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e6 e2       	ldi	r30, 0x26	; 38
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	82 60       	ori	r24, 0x02	; 2
    1104:	8c 93       	st	X, r24
    1106:	27 c0       	rjmp	.+78     	; 0x1156 <ADC_voidSetPrescaler+0xe8>
		case ADC_DIV_8  :	ADCSRA |= ADC_DIV_8;	break;
    1108:	a6 e2       	ldi	r26, 0x26	; 38
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e6 e2       	ldi	r30, 0x26	; 38
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	83 60       	ori	r24, 0x03	; 3
    1114:	8c 93       	st	X, r24
    1116:	1f c0       	rjmp	.+62     	; 0x1156 <ADC_voidSetPrescaler+0xe8>
		case ADC_DIV_16 :	ADCSRA |= ADC_DIV_16;	break;
    1118:	a6 e2       	ldi	r26, 0x26	; 38
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e6 e2       	ldi	r30, 0x26	; 38
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	84 60       	ori	r24, 0x04	; 4
    1124:	8c 93       	st	X, r24
    1126:	17 c0       	rjmp	.+46     	; 0x1156 <ADC_voidSetPrescaler+0xe8>
		case ADC_DIV_32 :	ADCSRA |= ADC_DIV_32;	break;
    1128:	a6 e2       	ldi	r26, 0x26	; 38
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e6 e2       	ldi	r30, 0x26	; 38
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	85 60       	ori	r24, 0x05	; 5
    1134:	8c 93       	st	X, r24
    1136:	0f c0       	rjmp	.+30     	; 0x1156 <ADC_voidSetPrescaler+0xe8>
		case ADC_DIV_64 :	ADCSRA |= ADC_DIV_64;	break;
    1138:	a6 e2       	ldi	r26, 0x26	; 38
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e6 e2       	ldi	r30, 0x26	; 38
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	86 60       	ori	r24, 0x06	; 6
    1144:	8c 93       	st	X, r24
    1146:	07 c0       	rjmp	.+14     	; 0x1156 <ADC_voidSetPrescaler+0xe8>
		case ADC_DIV_128:	ADCSRA |= ADC_DIV_128;	break;
    1148:	a6 e2       	ldi	r26, 0x26	; 38
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e6 e2       	ldi	r30, 0x26	; 38
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	87 60       	ori	r24, 0x07	; 7
    1154:	8c 93       	st	X, r24
	}		
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <ADC_voidEnableADCInterrupt>:

void ADC_voidEnableADCInterrupt(void)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADIE);
    116a:	a6 e2       	ldi	r26, 0x26	; 38
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e6 e2       	ldi	r30, 0x26	; 38
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 60       	ori	r24, 0x08	; 8
    1176:	8c 93       	st	X, r24
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <ADC_voidDisableADCInterrupt>:

void ADC_voidDisableADCInterrupt(void)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADIE);
    1186:	a6 e2       	ldi	r26, 0x26	; 38
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e6 e2       	ldi	r30, 0x26	; 38
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	87 7f       	andi	r24, 0xF7	; 247
    1192:	8c 93       	st	X, r24
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <ADC_voidEnableAutoTrigger>:

void ADC_voidEnableAutoTrigger(void)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADATE);
    11a2:	a6 e2       	ldi	r26, 0x26	; 38
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e6 e2       	ldi	r30, 0x26	; 38
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 62       	ori	r24, 0x20	; 32
    11ae:	8c 93       	st	X, r24
}
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <ADC_voidDisableAutoTrigger>:

void ADC_voidDisableAutoTrigger(void)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADATE);
    11be:	a6 e2       	ldi	r26, 0x26	; 38
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e6 e2       	ldi	r30, 0x26	; 38
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8f 7d       	andi	r24, 0xDF	; 223
    11ca:	8c 93       	st	X, r24
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <ADC_voidClearADCInterruptFlag>:

void ADC_voidClearADCInterruptFlag(void)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADIF);
    11da:	a6 e2       	ldi	r26, 0x26	; 38
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e6 e2       	ldi	r30, 0x26	; 38
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 61       	ori	r24, 0x10	; 16
    11e6:	8c 93       	st	X, r24
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <ADC_voidStartConversion>:

void ADC_voidStartConversion(void)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADSC);
    11f6:	a6 e2       	ldi	r26, 0x26	; 38
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e6 e2       	ldi	r30, 0x26	; 38
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 64       	ori	r24, 0x40	; 64
    1202:	8c 93       	st	X, r24
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <VSEN_voidInit>:
#include "../../MCAL/ADC/ADC.h"
#include "VSEN.h"


void VSEN_voidInit(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	
}
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <VSEN_u16GetVoltageReading>:

u16  VSEN_u16GetVoltageReading(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <VSEN_u16GetVoltageReading+0x6>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	/**Calculate Vin in mV*/
	// Vin = Vout * ((R1 + R2) / (R2))
	
	
	/**Return Vin in mV*/
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <ACS712_voidInit>:
#include "../../LIB/STD_Types.h"
#include "../../MCAL/ADC/ADC.h"
#include "ACS712.h"

void ACS712_voidInit(void)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <ACS712_u16GetCurrentReading>:

u16 ACS712_u16GetCurrentReading(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <ACS712_u16GetCurrentReading+0x6>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	/**Convert it from mV to mA*/
	// I = (V - 2.5) / sensitivity;
	
	
	/**Return in mA*/
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <CALC_voidInit>:
f64	Global_f64SumPower_mA; //used for True RMS
f64	Global_f64RMSPower_mA; //used for True RMS

f64	Global_f64Energy_mJ;

void CALC_voidInit(void){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	//Initialize Voltage and Current readings
	ACS712_voidInit();
    1256:	0e 94 16 09 	call	0x122c	; 0x122c <ACS712_voidInit>
	VSEN_voidInit();
    125a:	0e 94 05 09 	call	0x120a	; 0x120a <VSEN_voidInit>
	
	//setup the timer enterupt to run every multiple of 1mS
	TIM0_voidInit();
    125e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <TIM0_voidInit>
	TIM0_voidSetPreValue(0); ////////////////////?????????????????????????????????
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 c3 05 	call	0xb86	; 0xb86 <TIM0_voidSetPreValue>
	TIM0_voidTimerStart(TIM0_PRE_DIV_8);
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	0e 94 d1 05 	call	0xba2	; 0xba2 <TIM0_voidTimerStart>

	sei();
    126e:	78 94       	sei
	TIM0_voidOVFINTControl(TIM0_INT_ENABLE);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <TIM0_voidOVFINTControl>
	INT_voidOVFCallback(CALC_voidPeriodicFunc);
    1276:	82 e4       	ldi	r24, 0x42	; 66
    1278:	99 e0       	ldi	r25, 0x09	; 9
    127a:	0e 94 a0 06 	call	0xd40	; 0xd40 <INT_voidOVFCallback>
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <CALC_voidPeriodicFunc>:

void CALC_voidPeriodicFunc(void){
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Count =0;
	//enter this condition every SMAPLING_PERIOD_mS 
	if(Local_u16Count == 10){ ////////////////////?????????????????????????????????
    1294:	80 91 6c 01 	lds	r24, 0x016C
    1298:	90 91 6d 01 	lds	r25, 0x016D
    129c:	8a 30       	cpi	r24, 0x0A	; 10
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <CALC_voidPeriodicFunc+0x20>
    12a2:	68 c1       	rjmp	.+720    	; 0x1574 <CALC_voidPeriodicFunc+0x2f0>
		//read inst volt
		Global_f64InstVoltage_mv = 10;//VSEN_u16GetVoltageReading();
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e2       	ldi	r26, 0x20	; 32
    12aa:	b1 e4       	ldi	r27, 0x41	; 65
    12ac:	80 93 7e 01 	sts	0x017E, r24
    12b0:	90 93 7f 01 	sts	0x017F, r25
    12b4:	a0 93 80 01 	sts	0x0180, r26
    12b8:	b0 93 81 01 	sts	0x0181, r27
		//read inst current
		Global_f64InstCurrent_mA = 3; //ACS712_u16GetCurrentReading();
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a0 e4       	ldi	r26, 0x40	; 64
    12c2:	b0 e4       	ldi	r27, 0x40	; 64
    12c4:	80 93 7a 01 	sts	0x017A, r24
    12c8:	90 93 7b 01 	sts	0x017B, r25
    12cc:	a0 93 7c 01 	sts	0x017C, r26
    12d0:	b0 93 7d 01 	sts	0x017D, r27

		//Claculating RMS Values
		Global_f64SumVoltage_mv += Global_f64InstVoltage_mv * Global_f64InstVoltage_mv; //Calculate Voltage Sum Square across SMAPLING_COUNT samples
    12d4:	80 91 7e 01 	lds	r24, 0x017E
    12d8:	90 91 7f 01 	lds	r25, 0x017F
    12dc:	a0 91 80 01 	lds	r26, 0x0180
    12e0:	b0 91 81 01 	lds	r27, 0x0181
    12e4:	20 91 7e 01 	lds	r18, 0x017E
    12e8:	30 91 7f 01 	lds	r19, 0x017F
    12ec:	40 91 80 01 	lds	r20, 0x0180
    12f0:	50 91 81 01 	lds	r21, 0x0181
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	20 91 8e 01 	lds	r18, 0x018E
    1304:	30 91 8f 01 	lds	r19, 0x018F
    1308:	40 91 90 01 	lds	r20, 0x0190
    130c:	50 91 91 01 	lds	r21, 0x0191
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	80 93 8e 01 	sts	0x018E, r24
    1320:	90 93 8f 01 	sts	0x018F, r25
    1324:	a0 93 90 01 	sts	0x0190, r26
    1328:	b0 93 91 01 	sts	0x0191, r27
		Global_f64SumCurrent_mA += Global_f64InstCurrent_mA * Global_f64InstCurrent_mA; //Calculate Current Sum Square across SMAPLING_COUNT samples
    132c:	80 91 7a 01 	lds	r24, 0x017A
    1330:	90 91 7b 01 	lds	r25, 0x017B
    1334:	a0 91 7c 01 	lds	r26, 0x017C
    1338:	b0 91 7d 01 	lds	r27, 0x017D
    133c:	20 91 7a 01 	lds	r18, 0x017A
    1340:	30 91 7b 01 	lds	r19, 0x017B
    1344:	40 91 7c 01 	lds	r20, 0x017C
    1348:	50 91 7d 01 	lds	r21, 0x017D
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	20 91 96 01 	lds	r18, 0x0196
    135c:	30 91 97 01 	lds	r19, 0x0197
    1360:	40 91 98 01 	lds	r20, 0x0198
    1364:	50 91 99 01 	lds	r21, 0x0199
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	80 93 96 01 	sts	0x0196, r24
    1378:	90 93 97 01 	sts	0x0197, r25
    137c:	a0 93 98 01 	sts	0x0198, r26
    1380:	b0 93 99 01 	sts	0x0199, r27
		Global_u32SampleCount++;
    1384:	80 91 72 01 	lds	r24, 0x0172
    1388:	90 91 73 01 	lds	r25, 0x0173
    138c:	a0 91 74 01 	lds	r26, 0x0174
    1390:	b0 91 75 01 	lds	r27, 0x0175
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	a1 1d       	adc	r26, r1
    1398:	b1 1d       	adc	r27, r1
    139a:	80 93 72 01 	sts	0x0172, r24
    139e:	90 93 73 01 	sts	0x0173, r25
    13a2:	a0 93 74 01 	sts	0x0174, r26
    13a6:	b0 93 75 01 	sts	0x0175, r27

		if (Global_u32SampleCount == SMAPLING_COUNT){
    13aa:	80 91 72 01 	lds	r24, 0x0172
    13ae:	90 91 73 01 	lds	r25, 0x0173
    13b2:	a0 91 74 01 	lds	r26, 0x0174
    13b6:	b0 91 75 01 	lds	r27, 0x0175
    13ba:	88 3e       	cpi	r24, 0xE8	; 232
    13bc:	23 e0       	ldi	r18, 0x03	; 3
    13be:	92 07       	cpc	r25, r18
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	a2 07       	cpc	r26, r18
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	b2 07       	cpc	r27, r18
    13c8:	09 f0       	breq	.+2      	; 0x13cc <CALC_voidPeriodicFunc+0x148>
    13ca:	5c c0       	rjmp	.+184    	; 0x1484 <CALC_voidPeriodicFunc+0x200>
			Global_f64RMSVoltage_mv = sqrt(Global_f64SumVoltage_mv)/Global_u32SampleCount; 	//Calculate Voltage Root Mean Square across SMAPLING_COUNT samples
    13cc:	80 91 8e 01 	lds	r24, 0x018E
    13d0:	90 91 8f 01 	lds	r25, 0x018F
    13d4:	a0 91 90 01 	lds	r26, 0x0190
    13d8:	b0 91 91 01 	lds	r27, 0x0191
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	0e 94 9d 0b 	call	0x173a	; 0x173a <sqrt>
    13e4:	7b 01       	movw	r14, r22
    13e6:	8c 01       	movw	r16, r24
    13e8:	80 91 72 01 	lds	r24, 0x0172
    13ec:	90 91 73 01 	lds	r25, 0x0173
    13f0:	a0 91 74 01 	lds	r26, 0x0174
    13f4:	b0 91 75 01 	lds	r27, 0x0175
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
    1400:	9b 01       	movw	r18, r22
    1402:	ac 01       	movw	r20, r24
    1404:	c8 01       	movw	r24, r16
    1406:	b7 01       	movw	r22, r14
    1408:	0e 94 ed 02 	call	0x5da	; 0x5da <__divsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	80 93 82 01 	sts	0x0182, r24
    1414:	90 93 83 01 	sts	0x0183, r25
    1418:	a0 93 84 01 	sts	0x0184, r26
    141c:	b0 93 85 01 	sts	0x0185, r27
			Global_f64RMSCurrent_mA = sqrt(Global_f64SumCurrent_mA)/Global_u32SampleCount; 	//Calculate Current Root Mean Square across SMAPLING_COUNT samples
    1420:	80 91 96 01 	lds	r24, 0x0196
    1424:	90 91 97 01 	lds	r25, 0x0197
    1428:	a0 91 98 01 	lds	r26, 0x0198
    142c:	b0 91 99 01 	lds	r27, 0x0199
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	0e 94 9d 0b 	call	0x173a	; 0x173a <sqrt>
    1438:	7b 01       	movw	r14, r22
    143a:	8c 01       	movw	r16, r24
    143c:	80 91 72 01 	lds	r24, 0x0172
    1440:	90 91 73 01 	lds	r25, 0x0173
    1444:	a0 91 74 01 	lds	r26, 0x0174
    1448:	b0 91 75 01 	lds	r27, 0x0175
    144c:	bc 01       	movw	r22, r24
    144e:	cd 01       	movw	r24, r26
    1450:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	c8 01       	movw	r24, r16
    145a:	b7 01       	movw	r22, r14
    145c:	0e 94 ed 02 	call	0x5da	; 0x5da <__divsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	80 93 76 01 	sts	0x0176, r24
    1468:	90 93 77 01 	sts	0x0177, r25
    146c:	a0 93 78 01 	sts	0x0178, r26
    1470:	b0 93 79 01 	sts	0x0179, r27
			Global_u32SampleCount = 0; 													   	//Reset Sampling
    1474:	10 92 72 01 	sts	0x0172, r1
    1478:	10 92 73 01 	sts	0x0173, r1
    147c:	10 92 74 01 	sts	0x0174, r1
    1480:	10 92 75 01 	sts	0x0175, r1
		}	
		
		Global_f64InstPower_mW = Global_f64InstVoltage_mv * Global_f64InstCurrent_mA / 1000; //Power(mJ) = (Volt(mV) * Current(mA))/1000
    1484:	80 91 7e 01 	lds	r24, 0x017E
    1488:	90 91 7f 01 	lds	r25, 0x017F
    148c:	a0 91 80 01 	lds	r26, 0x0180
    1490:	b0 91 81 01 	lds	r27, 0x0181
    1494:	20 91 7a 01 	lds	r18, 0x017A
    1498:	30 91 7b 01 	lds	r19, 0x017B
    149c:	40 91 7c 01 	lds	r20, 0x017C
    14a0:	50 91 7d 01 	lds	r21, 0x017D
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a e7       	ldi	r20, 0x7A	; 122
    14ba:	54 e4       	ldi	r21, 0x44	; 68
    14bc:	0e 94 ed 02 	call	0x5da	; 0x5da <__divsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	80 93 92 01 	sts	0x0192, r24
    14c8:	90 93 93 01 	sts	0x0193, r25
    14cc:	a0 93 94 01 	sts	0x0194, r26
    14d0:	b0 93 95 01 	sts	0x0195, r27
		Global_f64RMSPower_mA = Global_f64SumVoltage_mv * Global_f64RMSCurrent_mA / 1000;
    14d4:	80 91 8e 01 	lds	r24, 0x018E
    14d8:	90 91 8f 01 	lds	r25, 0x018F
    14dc:	a0 91 90 01 	lds	r26, 0x0190
    14e0:	b0 91 91 01 	lds	r27, 0x0191
    14e4:	20 91 76 01 	lds	r18, 0x0176
    14e8:	30 91 77 01 	lds	r19, 0x0177
    14ec:	40 91 78 01 	lds	r20, 0x0178
    14f0:	50 91 79 01 	lds	r21, 0x0179
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	4a e7       	ldi	r20, 0x7A	; 122
    150a:	54 e4       	ldi	r21, 0x44	; 68
    150c:	0e 94 ed 02 	call	0x5da	; 0x5da <__divsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	80 93 8a 01 	sts	0x018A, r24
    1518:	90 93 8b 01 	sts	0x018B, r25
    151c:	a0 93 8c 01 	sts	0x018C, r26
    1520:	b0 93 8d 01 	sts	0x018D, r27
		Global_f64Energy_mJ += (Global_f64RMSPower_mA * SMAPLING_PERIOD_mS)/1000; // energy = power * time , since this is calculated every ms time = 1/1000
    1524:	80 91 8a 01 	lds	r24, 0x018A
    1528:	90 91 8b 01 	lds	r25, 0x018B
    152c:	a0 91 8c 01 	lds	r26, 0x018C
    1530:	b0 91 8d 01 	lds	r27, 0x018D
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a e7       	ldi	r20, 0x7A	; 122
    153e:	54 e4       	ldi	r21, 0x44	; 68
    1540:	0e 94 ed 02 	call	0x5da	; 0x5da <__divsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	20 91 6e 01 	lds	r18, 0x016E
    154c:	30 91 6f 01 	lds	r19, 0x016F
    1550:	40 91 70 01 	lds	r20, 0x0170
    1554:	50 91 71 01 	lds	r21, 0x0171
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	80 93 6e 01 	sts	0x016E, r24
    1568:	90 93 6f 01 	sts	0x016F, r25
    156c:	a0 93 70 01 	sts	0x0170, r26
    1570:	b0 93 71 01 	sts	0x0171, r27
		
		
	}

	Local_u16Count++;
    1574:	80 91 6c 01 	lds	r24, 0x016C
    1578:	90 91 6d 01 	lds	r25, 0x016D
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	90 93 6d 01 	sts	0x016D, r25
    1582:	80 93 6c 01 	sts	0x016C, r24
}
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	08 95       	ret

00001594 <CALC_voidReset>:

void CALC_voidReset(void){
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
	Global_f64Energy_mJ = 0;
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e0       	ldi	r26, 0x00	; 0
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	80 93 6e 01 	sts	0x016E, r24
    15a8:	90 93 6f 01 	sts	0x016F, r25
    15ac:	a0 93 70 01 	sts	0x0170, r26
    15b0:	b0 93 71 01 	sts	0x0171, r27
}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <CALC_f64GetRMSVoltage_mV>:


f64 CALC_f64GetRMSVoltage_mV(void)	{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	return Global_f64RMSVoltage_mv;
    15c2:	80 91 82 01 	lds	r24, 0x0182
    15c6:	90 91 83 01 	lds	r25, 0x0183
    15ca:	a0 91 84 01 	lds	r26, 0x0184
    15ce:	b0 91 85 01 	lds	r27, 0x0185
}
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <CALC_f64GetRMSCurrent_mA>:

f64 CALC_f64GetRMSCurrent_mA(void){
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	return Global_f64RMSCurrent_mA;
    15e4:	80 91 76 01 	lds	r24, 0x0176
    15e8:	90 91 77 01 	lds	r25, 0x0177
    15ec:	a0 91 78 01 	lds	r26, 0x0178
    15f0:	b0 91 79 01 	lds	r27, 0x0179
}
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <CALC_f64GetInstPower_mW>:

f64 CALC_f64GetInstPower_mW(void){
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
	return Global_f64InstPower_mW;
    1606:	80 91 92 01 	lds	r24, 0x0192
    160a:	90 91 93 01 	lds	r25, 0x0193
    160e:	a0 91 94 01 	lds	r26, 0x0194
    1612:	b0 91 95 01 	lds	r27, 0x0195
}
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <CALC_f64GetRMSPower_mW>:

f64 CALC_f64GetRMSPower_mW(void){
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	return Global_f64RMSPower_mA;
    1628:	80 91 8a 01 	lds	r24, 0x018A
    162c:	90 91 8b 01 	lds	r25, 0x018B
    1630:	a0 91 8c 01 	lds	r26, 0x018C
    1634:	b0 91 8d 01 	lds	r27, 0x018D
}
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <CALC_f64GetEnergy_mJ>:

f64 CALC_f64GetEnergy_mJ(void){
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	return Global_f64Energy_mJ;
    164a:	80 91 6e 01 	lds	r24, 0x016E
    164e:	90 91 6f 01 	lds	r25, 0x016F
    1652:	a0 91 70 01 	lds	r26, 0x0170
    1656:	b0 91 71 01 	lds	r27, 0x0171
}
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <main>:
#include <avr/io.h>

#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0

}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <__divmodhi4>:
    1676:	97 fb       	bst	r25, 7
    1678:	09 2e       	mov	r0, r25
    167a:	07 26       	eor	r0, r23
    167c:	0a d0       	rcall	.+20     	; 0x1692 <__divmodhi4_neg1>
    167e:	77 fd       	sbrc	r23, 7
    1680:	04 d0       	rcall	.+8      	; 0x168a <__divmodhi4_neg2>
    1682:	0c d0       	rcall	.+24     	; 0x169c <__udivmodhi4>
    1684:	06 d0       	rcall	.+12     	; 0x1692 <__divmodhi4_neg1>
    1686:	00 20       	and	r0, r0
    1688:	1a f4       	brpl	.+6      	; 0x1690 <__divmodhi4_exit>

0000168a <__divmodhi4_neg2>:
    168a:	70 95       	com	r23
    168c:	61 95       	neg	r22
    168e:	7f 4f       	sbci	r23, 0xFF	; 255

00001690 <__divmodhi4_exit>:
    1690:	08 95       	ret

00001692 <__divmodhi4_neg1>:
    1692:	f6 f7       	brtc	.-4      	; 0x1690 <__divmodhi4_exit>
    1694:	90 95       	com	r25
    1696:	81 95       	neg	r24
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	08 95       	ret

0000169c <__udivmodhi4>:
    169c:	aa 1b       	sub	r26, r26
    169e:	bb 1b       	sub	r27, r27
    16a0:	51 e1       	ldi	r21, 0x11	; 17
    16a2:	07 c0       	rjmp	.+14     	; 0x16b2 <__udivmodhi4_ep>

000016a4 <__udivmodhi4_loop>:
    16a4:	aa 1f       	adc	r26, r26
    16a6:	bb 1f       	adc	r27, r27
    16a8:	a6 17       	cp	r26, r22
    16aa:	b7 07       	cpc	r27, r23
    16ac:	10 f0       	brcs	.+4      	; 0x16b2 <__udivmodhi4_ep>
    16ae:	a6 1b       	sub	r26, r22
    16b0:	b7 0b       	sbc	r27, r23

000016b2 <__udivmodhi4_ep>:
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	5a 95       	dec	r21
    16b8:	a9 f7       	brne	.-22     	; 0x16a4 <__udivmodhi4_loop>
    16ba:	80 95       	com	r24
    16bc:	90 95       	com	r25
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	08 95       	ret

000016c4 <__prologue_saves__>:
    16c4:	2f 92       	push	r2
    16c6:	3f 92       	push	r3
    16c8:	4f 92       	push	r4
    16ca:	5f 92       	push	r5
    16cc:	6f 92       	push	r6
    16ce:	7f 92       	push	r7
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	ca 1b       	sub	r28, r26
    16ee:	db 0b       	sbc	r29, r27
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	09 94       	ijmp

000016fc <__epilogue_restores__>:
    16fc:	2a 88       	ldd	r2, Y+18	; 0x12
    16fe:	39 88       	ldd	r3, Y+17	; 0x11
    1700:	48 88       	ldd	r4, Y+16	; 0x10
    1702:	5f 84       	ldd	r5, Y+15	; 0x0f
    1704:	6e 84       	ldd	r6, Y+14	; 0x0e
    1706:	7d 84       	ldd	r7, Y+13	; 0x0d
    1708:	8c 84       	ldd	r8, Y+12	; 0x0c
    170a:	9b 84       	ldd	r9, Y+11	; 0x0b
    170c:	aa 84       	ldd	r10, Y+10	; 0x0a
    170e:	b9 84       	ldd	r11, Y+9	; 0x09
    1710:	c8 84       	ldd	r12, Y+8	; 0x08
    1712:	df 80       	ldd	r13, Y+7	; 0x07
    1714:	ee 80       	ldd	r14, Y+6	; 0x06
    1716:	fd 80       	ldd	r15, Y+5	; 0x05
    1718:	0c 81       	ldd	r16, Y+4	; 0x04
    171a:	1b 81       	ldd	r17, Y+3	; 0x03
    171c:	aa 81       	ldd	r26, Y+2	; 0x02
    171e:	b9 81       	ldd	r27, Y+1	; 0x01
    1720:	ce 0f       	add	r28, r30
    1722:	d1 1d       	adc	r29, r1
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	ed 01       	movw	r28, r26
    1730:	08 95       	ret
    1732:	11 f4       	brne	.+4      	; 0x1738 <__epilogue_restores__+0x3c>
    1734:	0e f4       	brtc	.+2      	; 0x1738 <__epilogue_restores__+0x3c>
    1736:	4d c0       	rjmp	.+154    	; 0x17d2 <__fp_nan>
    1738:	3e c0       	rjmp	.+124    	; 0x17b6 <__fp_mpack>

0000173a <sqrt>:
    173a:	5d d0       	rcall	.+186    	; 0x17f6 <__fp_splitA>
    173c:	d0 f3       	brcs	.-12     	; 0x1732 <__epilogue_restores__+0x36>
    173e:	99 23       	and	r25, r25
    1740:	d9 f3       	breq	.-10     	; 0x1738 <__epilogue_restores__+0x3c>
    1742:	ce f3       	brts	.-14     	; 0x1736 <__epilogue_restores__+0x3a>
    1744:	9f 57       	subi	r25, 0x7F	; 127
    1746:	55 0b       	sbc	r21, r21
    1748:	87 ff       	sbrs	r24, 7
    174a:	46 d0       	rcall	.+140    	; 0x17d8 <__fp_norm2>
    174c:	00 24       	eor	r0, r0
    174e:	a0 e6       	ldi	r26, 0x60	; 96
    1750:	40 ea       	ldi	r20, 0xA0	; 160
    1752:	90 01       	movw	r18, r0
    1754:	80 58       	subi	r24, 0x80	; 128
    1756:	56 95       	lsr	r21
    1758:	97 95       	ror	r25
    175a:	28 f4       	brcc	.+10     	; 0x1766 <sqrt+0x2c>
    175c:	80 5c       	subi	r24, 0xC0	; 192
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	20 f0       	brcs	.+8      	; 0x176e <sqrt+0x34>
    1766:	26 17       	cp	r18, r22
    1768:	37 07       	cpc	r19, r23
    176a:	48 07       	cpc	r20, r24
    176c:	30 f4       	brcc	.+12     	; 0x177a <sqrt+0x40>
    176e:	62 1b       	sub	r22, r18
    1770:	73 0b       	sbc	r23, r19
    1772:	84 0b       	sbc	r24, r20
    1774:	20 29       	or	r18, r0
    1776:	31 29       	or	r19, r1
    1778:	4a 2b       	or	r20, r26
    177a:	a6 95       	lsr	r26
    177c:	17 94       	ror	r1
    177e:	07 94       	ror	r0
    1780:	20 25       	eor	r18, r0
    1782:	31 25       	eor	r19, r1
    1784:	4a 27       	eor	r20, r26
    1786:	58 f7       	brcc	.-42     	; 0x175e <sqrt+0x24>
    1788:	66 0f       	add	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	20 f0       	brcs	.+8      	; 0x1798 <sqrt+0x5e>
    1790:	26 17       	cp	r18, r22
    1792:	37 07       	cpc	r19, r23
    1794:	48 07       	cpc	r20, r24
    1796:	30 f4       	brcc	.+12     	; 0x17a4 <sqrt+0x6a>
    1798:	62 0b       	sbc	r22, r18
    179a:	73 0b       	sbc	r23, r19
    179c:	84 0b       	sbc	r24, r20
    179e:	20 0d       	add	r18, r0
    17a0:	31 1d       	adc	r19, r1
    17a2:	41 1d       	adc	r20, r1
    17a4:	a0 95       	com	r26
    17a6:	81 f7       	brne	.-32     	; 0x1788 <sqrt+0x4e>
    17a8:	b9 01       	movw	r22, r18
    17aa:	84 2f       	mov	r24, r20
    17ac:	91 58       	subi	r25, 0x81	; 129
    17ae:	88 0f       	add	r24, r24
    17b0:	96 95       	lsr	r25
    17b2:	87 95       	ror	r24
    17b4:	08 95       	ret

000017b6 <__fp_mpack>:
    17b6:	9f 3f       	cpi	r25, 0xFF	; 255
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <__fp_mpack_finite+0xc>

000017ba <__fp_mpack_finite>:
    17ba:	91 50       	subi	r25, 0x01	; 1
    17bc:	20 f4       	brcc	.+8      	; 0x17c6 <__fp_mpack_finite+0xc>
    17be:	87 95       	ror	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b7 95       	ror	r27
    17c6:	88 0f       	add	r24, r24
    17c8:	91 1d       	adc	r25, r1
    17ca:	96 95       	lsr	r25
    17cc:	87 95       	ror	r24
    17ce:	97 f9       	bld	r25, 7
    17d0:	08 95       	ret

000017d2 <__fp_nan>:
    17d2:	9f ef       	ldi	r25, 0xFF	; 255
    17d4:	80 ec       	ldi	r24, 0xC0	; 192
    17d6:	08 95       	ret

000017d8 <__fp_norm2>:
    17d8:	91 50       	subi	r25, 0x01	; 1
    17da:	50 40       	sbci	r21, 0x00	; 0
    17dc:	66 0f       	add	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	d2 f7       	brpl	.-12     	; 0x17d8 <__fp_norm2>
    17e4:	08 95       	ret

000017e6 <__fp_split3>:
    17e6:	57 fd       	sbrc	r21, 7
    17e8:	90 58       	subi	r25, 0x80	; 128
    17ea:	44 0f       	add	r20, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	59 f0       	breq	.+22     	; 0x1806 <__fp_splitA+0x10>
    17f0:	5f 3f       	cpi	r21, 0xFF	; 255
    17f2:	71 f0       	breq	.+28     	; 0x1810 <__fp_splitA+0x1a>
    17f4:	47 95       	ror	r20

000017f6 <__fp_splitA>:
    17f6:	88 0f       	add	r24, r24
    17f8:	97 fb       	bst	r25, 7
    17fa:	99 1f       	adc	r25, r25
    17fc:	61 f0       	breq	.+24     	; 0x1816 <__fp_splitA+0x20>
    17fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1800:	79 f0       	breq	.+30     	; 0x1820 <__fp_splitA+0x2a>
    1802:	87 95       	ror	r24
    1804:	08 95       	ret
    1806:	12 16       	cp	r1, r18
    1808:	13 06       	cpc	r1, r19
    180a:	14 06       	cpc	r1, r20
    180c:	55 1f       	adc	r21, r21
    180e:	f2 cf       	rjmp	.-28     	; 0x17f4 <__fp_split3+0xe>
    1810:	46 95       	lsr	r20
    1812:	f1 df       	rcall	.-30     	; 0x17f6 <__fp_splitA>
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <__fp_splitA+0x30>
    1816:	16 16       	cp	r1, r22
    1818:	17 06       	cpc	r1, r23
    181a:	18 06       	cpc	r1, r24
    181c:	99 1f       	adc	r25, r25
    181e:	f1 cf       	rjmp	.-30     	; 0x1802 <__fp_splitA+0xc>
    1820:	86 95       	lsr	r24
    1822:	71 05       	cpc	r23, r1
    1824:	61 05       	cpc	r22, r1
    1826:	08 94       	sec
    1828:	08 95       	ret

0000182a <_exit>:
    182a:	f8 94       	cli

0000182c <__stop_program>:
    182c:	ff cf       	rjmp	.-2      	; 0x182c <__stop_program>
